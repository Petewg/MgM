/*
 * The following parts are Copyright of the individual authors.
 * www - http://www.hmgextended.com
 *
 * Copyright 2007-2010 Grigory Filatov <gfilatov@inbox.ru>
 * 21/2/2018 Pierpaolo Martinello add NoWarn parameter
 *    Documentation for: ProcInfo library
 *
 * See minigui/license.txt for licensing terms.
 *
 */

/*  $DOC$
 *  $FUNCNAME$
 *     GETPROCESSESW9X()
 *  $CATEGORY$
 *     Processes
 *  $ONELINER$
 *     Get processes list on Win9x/ME
 *  $SYNTAX$
 *     GETPROCESSESW9X() -> aProcessInfo
 *  $ARGUMENTS$
 *     None
 *  $RETURNS$
 *     A two element array containing the following data:
 *        aProcessInfo[1] - The Process ID
 *        aProcessInfo[2] - The full name of Exe File
 *  $DESCRIPTION$
 *     This function is useful for times you need to receive
 *     the current list of processes on Win9x/ME.
 *  $EXAMPLES$
 *     aProcessInfo := IF(IsWinNT(), GetProcessesNT(), GetProcessesW9x())
 *  $SEEALSO$
 *     GETPROCESSESNT()
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *     GETPROCESSESNT()
 *  $CATEGORY$
 *     Processes
 *  $ONELINER$
 *     Get processes list on WinNT/2k/XP
 *  $SYNTAX$
 *     GETPROCESSESNT() -> aProcessInfo
 *  $ARGUMENTS$
 *     None
 *  $RETURNS$
 *     A two element array containing the following data:
 *        aProcessInfo[1] - The Process ID
 *        aProcessInfo[2] - The full name of Exe File
 *  $DESCRIPTION$
 *     This function is useful for times you need to receive
 *     the current list of processes on WinNT/2k/XP.
 *  $EXAMPLES$
 *     aProcessInfo := IF(IsWinNT(), GetProcessesNT(), GetProcessesW9x())
 *  $SEEALSO$
 *     GETPROCESSESW9X()
 *  $END$
*/

/*  $DOC$
 *  $FUNCNAME$
 *     KILLPROCESS()
 *  $CATEGORY$
 *     Processes
 *  $ONELINER$
 *     Terminate a specified process
 *  $SYNTAX$
 *     KILLPROCESS( <nPID>, <noWarn> )
 *  $ARGUMENTS$
 *     <nPID> is a number of Process ID
 *     <noWarn> is logical, if .T. suppress Warning Messagebox
 *     default  .F.
 *  $RETURNS$
 *     True or False if succeded or not.
 *  $DESCRIPTION$
 *     This function terminate a specified process
 *     by it process ID.
 *  $EXAMPLES$
 *     aProcessInfo := IF(IsWinNT(), GetProcessesNT(), GetProcessesW9x())
 *     KillProcess( aProcessInfo[nTerminateItem][1] )
 *  $SEEALSO$
 *     GETPROCESSESNT(),GETPROCESSESW9X()
 *  $END$
*/

/*  $DOC$
 *  $FUNCNAME$
 *     SETPRIORITYTOPROCESS()
 *  $CATEGORY$
 *     Processes
 *  $ONELINER$
 *     Set priority to specified process
 *  $SYNTAX$
 *     SETPRIORITYTOPROCESS( <nPID>, <nPriority>, <noWarn> )
 *  $ARGUMENTS$
 *     <nPID> is a number of Process ID
 *     <nPriority> is the type of priority:
 *         1 = above normal priority (WinNT and above only)
 *         2 = below normal priority (WinNT and above only)
 *         3 = high priority
 *         4 = idle priority
 *         5 = normal priority
 *         6 = realtime priority
 *     <noWarn> is logical, if .T. suppress Warning Messagebox
 *         default  .F.
 *  $RETURNS$
 *     True or False if succeded or not.
 *  $DESCRIPTION$
 *     This function set priority to specified process
 *     by it process ID.
 *  $EXAMPLES$
 *     aProcessInfo := IF(IsWinNT(), GetProcessesNT(), GetProcessesW9x())
 *     SetPriorityToProcess( aProcessInfo[nHighPriorityItem][1], 3 )
 *     SetPriorityToProcess( aProcessInfo[nIdlePriorityItem][1], 4 )
 *  $SEEALSO$
 *     GETPROCESSESNT(),GETPROCESSESW9X()
 *  $END$
*/

/*  $DOC$
 *  $FUNCNAME$
 *     GETPROCESSPRIORITY()
 *  $CATEGORY$
 *     Processes
 *  $ONELINER$
 *     Get priority of specified process
 *  $SYNTAX$
 *     GETPROCESSPRIORITY( <nPID> ) -> nPriority
 *  $ARGUMENTS$
 *     <nPID> is a number of Process ID
 *  $RETURNS$
 *     nPriority is the type of priority:
 *         -3 = below normal priority (WinNT and above only)
 *         -2 = above normal priority (WinNT and above only)
 *         -1 = idle priority
 *          0 = normal priority
 *          1 = high priority
 *          2 = realtime priority
 *  $DESCRIPTION$
 *     This function get priority of specified process
 *     by it process ID.
 *  $EXAMPLES$
 *     aProcessInfo := IF(IsWinNT(), GetProcessesNT(), GetProcessesW9x())
 *     nProcessPriority := GetProcessPriority( aProcessInfo[nItem][1] )
 *     SWITCH nProcessPriority
 *        CASE -1
 *             ? "Idle"
 *             EXIT
 *        CASE 1
 *             ? "High"
 *             EXIT
 *        CASE 2
 *             ? "Realtime"
 *             EXIT
 *        OTHERWISE
 *             ? "Normal"
 *     END
 *  $SEEALSO$
 *     GETPROCESSESNT(),GETPROCESSESW9X()
 *  $END$
*/
