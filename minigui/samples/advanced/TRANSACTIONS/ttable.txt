/*
 * Table,Record and Field Class
 *
 * Copyright 2000-2003 Manos Aspradakis maspr@otenet.gr
 *
 * Copyright 2000-2002 Luiz Rafael Culik
 * Methods CreateTable(),Gentable(),AddField()
 *
 */

/****
*     Utility functions
*
*     TableNew()
*
*     GetTable()
*/

FUNCTION TableNew( cDBF, cALIAS, cOrderBag, cDRIVER, ;
      lNET, cPATH, lNEW, lREADONLY )

   LOCAL nPos
   LOCAL lAuto
   LOCAL oDB
   LOCAL o

   __defaultNIL( @lNET, .T. )
   __defaultNIL( @lNEW, .T. )
   __defaultNIL( @lREADONLY, .F. )
   __defaultNIL( @cDRIVER, "DBFCDX" )
   __defaultNIL( @cPATH, Set( _SET_DEFAULT ) )
   __defaultNIL( @cAlias, FixExt( cDbf ) )
   __defaultNIL( @cOrderBag, FixExt( cDbf ) )

   lAuto := Set( _SET_AUTOPEN, .F. )

   IF ( nPos := AScan( s_aTables, {| e | e[ 1 ] == Upper( cALIAS ) } ) ) > 0

      oDB := s_aTables[ nPos, 2 ]

   ELSE
      o := HBTable():New( cDBF, cALIAS, cOrderBag, cDRIVER, ;
         lNET, cPATH, lNEW, lREADONLY )
      IF o:Open()
         oDB := o:FldInit()
      ENDIF

      AAdd( s_aTables, { Upper( cAlias ), oDB } )

   ENDIF

   Set( _SET_AUTOPEN, lAuto )

   RETURN oDB

FUNCTION GetTable( cAlias )

   LOCAL nPos
   LOCAL oDB

   IF ( nPos := AScan( s_aTables, {| e | e[ 1 ] == Upper( cAlias ) } ) ) > 0
      oDB := s_aTables[ nPos, 2 ]
   ENDIF

   RETURN oDB


/****
*
*     CLASS HBField()
*
*/

CREATE CLASS HBField

   VAR ALIAS INIT Alias()
   VAR Name INIT ""
   VAR TYPE INIT "C"
   VAR Len INIT 0
   VAR Dec INIT 0
   VAR ORDER INIT 0
   VAR Value

   METHOD Get() INLINE ::value := ( ::alias )->( FieldGet( ::order ) )
   METHOD Put( x ) INLINE ::value := x, ;
      ( ::alias )->( FieldPut( ::order, x ) )

ENDCLASS

/****
*
*     CLASS HBRecord()
*
*
*
*/

CREATE CLASS HBRecord

   VAR Buffer INIT {}
   VAR ALIAS INIT Alias()
   VAR Number INIT 0
   VAR aFields INIT {}

   METHOD New( cAlias )
   METHOD Get()
   METHOD Put()

ENDCLASS

/****
*
*     CLASS HBTable
*
*/

CREATE CLASS HBTable

   VAR Buffer INIT {}                  // 1
   VAR ALIAS INIT Alias()              // 2
   VAR Area INIT 0 // 3

   VAR oRec
   VAR aStruc INIT {}
   VAR nRecno INIT 0
   VAR cDBF INIT ""
   VAR cOrderBag INIT ""
   VAR cOrderFile INIT ""
   VAR cPATH INIT ""
   VAR Driver INIT "DBFCDX"
   VAR IsNew INIT .T.
   VAR IsReadOnly INIT .F.
   VAR IsNet INIT .T.
   VAR aSaveState INIT {}
   VAR lMonitor INIT .F.
   VAR ReadBuffers INIT {}
   VAR WriteBuffers INIT {}
   VAR DeleteBuffers INIT {}
   VAR nDataOffset INIT 0
   VAR BlankBuffer INIT {}
   VAR aOrders INIT {}
   VAR aChildren INIT {}
   VAR oParent

   METHOD Eof() INLINE ( ::Alias )->( Eof() )
   METHOD Bof() INLINE ( ::Alias )->( Bof() )
   METHOD RecNo() INLINE ( ::Alias )->( RecNo() )
   METHOD LastRec() INLINE ( ::Alias )->( LastRec() )
   METHOD Skip( n ) INLINE ( ::Alias )->( dbSkip( n ) ), ;
      ::nRecno := ( ::Alias )->( RecNo() )
//
// table movement
//
   METHOD Goto( n ) INLINE ( ::Alias )->( dbGoto( n ) )
   METHOD goTop() INLINE ( ::Alias )->( dbGoTop() )
   METHOD goBottom() INLINE ( ::Alias )->( dbGoBottom() )
   METHOD SetFocus() INLINE ( ::Alias )->( Select( ::ALias ) )
   METHOD Append( l ) INLINE iif( ::isNet, ( ::Alias )->( NetAppend( l ) ), ;
      ( ::alias )->( dbAppend() ) )
   METHOD Recall() INLINE ( ::Alias )->( NetRecall() )

   METHOD Locate( bFor, bWhile, nNext, nRec, lRest ) INLINE ;
      ( ::Alias )->( __dbLocate( bFor, bWhile, ;
      nNext, nRec, lRest ) )
   METHOD Continue() INLINE ( ::Alias )->( __dbContinue() )
   METHOD Found() INLINE ( ::Alias )->( Found() )
   METHOD Kill() INLINE ( ::Alias )->( dbCommit() ), ;
      ( ::Alias )->( dbUnlock() ), ;
      ( ::Alias )->( dbCloseArea() ), ;
      ::ClearBuffers()
   METHOD ClearBuffers() INLINE ::ReadBuffers := {}, ;
      ::WriteBuffers := {}, ;
      ::DeleteBuffers := {}

   METHOD dbIsShared() INLINE ( ::Alias )->( dbInfo( DBI_SHARED ) )

   METHOD dbIsFLocked() INLINE ( ::Alias )->( dbInfo( DBI_ISFLOCK ) )

   METHOD dbLockCount() INLINE ( ::Alias )->( dbInfo( DBI_LOCKCOUNT ) )

   METHOD dbInfo( n, x ) INLINE ( ::Alias )->( dbInfo( n, x ) )

   METHOD dbGetAlias() INLINE ( ::Alias )

   METHOD dbFullPath() INLINE ( ::Alias )->( dbInfo( DBI_FULLPATH ) )

   METHOD IsRLocked( n ) INLINE ( ::Alias )->( dbRecordInfo( DBRI_LOCKED, n ) )

   METHOD IsRUpdated( n ) INLINE ( ::Alias )->( dbRecordInfo( DBRI_UPDATED, n ) )

   METHOD dbRecordInfo( n, x ) INLINE ( ::Alias )->( dbRecordInfo( n,, x ) )

   METHOD dbOrderInfo( n, x, u ) INLINE ( ::Alias )->( dbOrderInfo( n, ::cOrderFile, x, u ) )

   METHOD OrderCount() INLINE ;
      ( ::Alias )->( dbOrderInfo( DBOI_ORDERCOUNT, ::cOrderFile ) )

   METHOD AutoOpen( l ) INLINE ;
      ( ::Alias )->( dbOrderInfo( DBOI_AUTOOPEN, ::cOrderFile,, l ) )

   METHOD AutoShare( l ) INLINE ;
      ( ::Alias )->( dbOrderInfo( DBOI_AUTOSHARE, ::cOrderFile,, l ) )

   METHOD Used() INLINE Select( ::Alias ) > 0

   METHOD ordSetFocus( ncTag ) INLINE ( ::Alias )->( ordSetFocus( ncTag ) )

   METHOD ordName( nOrder ) INLINE ;
      ( ::Alias )->( ordName( nOrder, ::cOrderBag ) )

   METHOD ordNumber( cOrder ) INLINE ;
      ( ::Alias )->( ordNumber( cOrder, ::cOrderBag ) )

   METHOD ordScope( n, u ) INLINE ( ::Alias )->( ordScope( n, u ) )

   METHOD ordIsUnique( nc ) INLINE ( ::Alias )->( ordIsUnique( nc, ;
      ::cOrderBag ) )

   METHOD ordSkipUnique( n ) INLINE ( ::Alias )->( ordSkipUnique( n ) )
   METHOD ordSetRelation( n, b, c ) INLINE ( ::Alias )->( ordSetRelation( n, b, c ) )

   METHOD SetTopScope( xScope ) INLINE ;
      ( ::alias )->( ordScope( TOPSCOPE, xScope ) )
   METHOD SetBottomScope( xScope ) INLINE ;
      ( ::alias )->( ordScope( BOTTOMSCOPE, xScope ) )
   METHOD KillScope() INLINE ( ::alias )->( ordScope( TOPSCOPE, NIL ) ), ;
      ( ::alias )->( ordScope( BOTTOMSCOPE, NIL ) )

   METHOD New( cDBF, cALIAS, cOrderBag, cDRIVER, ;
      lNET, cPATH, lNEW, lREADONLY )

   METHOD Open()

   METHOD dbMove( nDirection )
   METHOD FldInit()
   METHOD Read( lKeepBuffer )
   METHOD ReadBLANK( lKeepBuffer )
   METHOD Write( lKeepBuffer )
   METHOD BufWrite( aBuffer )
   MESSAGE Delete() METHOD __oTDelete( lKeepBuffer ) // reserved word - *HAS* to be renamed...
//
// Transaction control subsystem...
//
   METHOD SetMonitor( l )
   METHOD Undo( nBuffer, nLevel )

   METHOD dbSkip( n ) INLINE ( ::Alias )->( dbSkip( n ) ), ;
      ::nRecno := ( ::alias )->( RecNo() )

   METHOD dbGoto( n ) INLINE ( ::Alias )->( dbGoto( n ) )

   METHOD dbEval( a, b, c, d, e, f ) INLINE ( ::Alias )->( dbEval( a, b, c, d, e, f ) )
   METHOD dbSeek( a, b, c ) INLINE ( ::Alias )->( dbSeek( a, b, c ) )

   METHOD dbFilter() INLINE ( ::Alias )->( dbFilter() )
   METHOD SetFilter( c ) INLINE ;
      iif( c != NIL, ( ::Alias )->( dbSetFilter( hb_macroBlock( c ), c ) ), ;
      ( ::Alias )->( dbClearFilter() ) )
//
// Relation Methods
//
   METHOD AddChild( oChild, cKey )

//
//   ORDER MANAGEMENT
//
   METHOD AddOrder( cTag, cKey, cLabel, ;
      cFor, cWhile, ;
      lUnique, ;
      bEval, nInterval, cOrderFile )
   METHOD GetOrderLabels()
   METHOD SetOrder( xTag )
   METHOD GetOrder( xOrder )
   METHOD FastReindex()
   METHOD REINDEX()

   METHOD CreateTable( cFile )
   METHOD AddField( f, t, l, d )
   METHOD Gentable()

   ERROR HANDLER OnError( uParam )

ENDCLASS


CREATE CLASS HBOrder

   VAR oTable
   VAR cOrderBag
   VAR Label, TAG
   VAR cKey, bKey
   VAR cFor, bFor
   VAR cWhile, bWhile
   VAR UNIQUE INIT .F.
   VAR bEval
   VAR nInterval
   METHOD Alias() INLINE ::oTable:Alias

   METHOD New( cTag, cKey, cLabel, cFor, cWhile, lUnique, bEval, nInterval, cOrderBag )
   METHOD Create()

   METHOD SetFocus() INLINE ( ::alias )->( ordSetFocus( ::Tag, ::cOrderBag ) )
   METHOD Destroy() INLINE ( ::alias )->( ordDestroy( ::Tag, ::cOrderBag ) )
   METHOD ordDestroy() INLINE ( ::alias )->( ordDestroy( ::Tag, ::cOrderBag ) )
   METHOD ordBagExt() INLINE ( ::alias )->( ordBagExt() )
   METHOD ordKeyCount() INLINE ( ::alias )->( ordKeyCount( ::Tag, ::cOrderBag ) )
   METHOD ordFor() INLINE ( ::alias )->( ordFor( ::Tag, ::cOrderBag ) )
   METHOD ordIsUnique() INLINE ( ::alias )->( ordIsUnique( ::Tag, ::cOrderBag ) )
   METHOD ordKey() INLINE ( ::alias )->( ordKey( ::Tag, ::cOrderBag ) )
   METHOD ordKeyNo() INLINE ( ::alias )->( ordKeyNo( ::Tag, ::cOrderBag ) )
   METHOD ordKeyVal() INLINE ( ::alias )->( ordKeyVal( ::Tag, ::cOrderBag ) )

ENDCLASS
