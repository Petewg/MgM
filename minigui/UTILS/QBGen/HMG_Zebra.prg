#include "hmg.ch"
#include "hbzebra.ch"

/*
  HMG_CreateBarCode() function can be used to create barcode image in more file format if cFileName parameter is included.
  If cFileName is omitted, the function returns the hBitMap handle of barcode.
  Any one of the following Barcode types is allowed:
  { "EAN13","EAN8","UPCA","UPCE","CODE39","ITF","MSI","CODABAR","CODE93","CODE11","CODE128","PDF417","DATAMATRIX","QRCODE" }
  Checkdigit will be generated by library if omitted.
*/

//       HMG_CreateBarCode( cCode, cType, [nBarwidth], [nBarHeight], [lDisplayCode], [cPNGFileName], [aBarColor], [aBackColor], [lCheckSum], [lWide2_5], [lWide3] )
FUNCTION HMG_CreateBarCode( cCode, cType, nLineWidth, nLineHeight, lShowdigits, cImageFileName, aBarColor, aBackColor, nflags ,format)

   LOCAL hBitmap, cTextCode, Fmt
   DEFAULT nLineWidth := 2
   DEFAULT nLineHeight := 100
   DEFAULT aBarColor := BLACK
   DEFAULT aBackColor := WHITE
   DEFAULT lShowDigits TO 0
   DEFAULT cImageFileName := ''
   DEFAULT FORMAT TO "JPG"

   SWITCH FORMAT

          CASE "PNG"
               Fmt := BT_FILEFORMAT_PNG
               exit

          CASE "TIF"
               Fmt := BT_FILEFORMAT_TIF
               exit

          CASE "GIF"
               Fmt := BT_FILEFORMAT_GIF
               exit

          CASE "JPG"
               Fmt := BT_FILEFORMAT_JPG
               exit

          CASE "BMP"
               Fmt := BT_FILEFORMAT_BMP
               exit

          OTHERWISE
               Fmt := BT_FILEFORMAT_PNG
   EndSwitch

   IF nFlags == 0
      nFlags := Nil
   ENDIF
   
   cTextCode   := ""
   hBitmap := HMGZebra_CreateBitmapBarCode ( aBarColor, aBackColor, nLineWidth, nLineHeight, cType, cCode, nFlags, lShowdigits, @cTextCode )

   IF hBitmap == 0
      RETURN hBitmap
   ENDIF

   IF len( cImageFileName ) <> 0
      BT_BitmapSaveFile( hBitmap, cImageFileName, Fmt )
      BT_BitmapRelease ( hBitmap )
      RETURN 1
   ENDIF

RETURN hBitmap

*-----------------------------------------------------------------------------------------------------------------------*
FUNCTION HMGZebra_CreateBitmapBarCode (aBarColor, aBackColor, nLineWidth, nLineHeight, cType, cCode, nFlags, lShowdigits, cTextCode)
*-----------------------------------------------------------------------------------------------------------------------*
LOCAL hBitmap:=0, hZebra
LOCAL hDC, BTstruct, nFontSize
LOCAL nSizeWidth, nSizeHeight
LOCAL cFont := 'Arial'

   SWITCH cType
   CASE "EAN13"      ; hZebra := hb_zebra_create_ean13( cCode, nFlags )   ; EXIT
   CASE "EAN8"       ; hZebra := hb_zebra_create_ean8( cCode, nFlags )    ; EXIT
   CASE "UPCA"       ; hZebra := hb_zebra_create_upca( cCode, nFlags )    ; EXIT
   CASE "UPCE"       ; hZebra := hb_zebra_create_upce( cCode, nFlags )    ; EXIT
   CASE "CODE39"     ; hZebra := hb_zebra_create_code39( cCode, nFlags )  ; EXIT
   CASE "ITF"        ; hZebra := hb_zebra_create_itf( cCode, nFlags )     ; EXIT
   CASE "MSI"        ; hZebra := hb_zebra_create_msi( cCode, nFlags )     ; EXIT
   CASE "CODABAR"    ; hZebra := hb_zebra_create_codabar( cCode, nFlags ) ; EXIT
   CASE "CODE93"     ; hZebra := hb_zebra_create_code93( cCode, nFlags )  ; EXIT
   CASE "CODE11"     ; hZebra := hb_zebra_create_code11( cCode, nFlags )  ; EXIT
   CASE "CODE128"    ; hZebra := hb_zebra_create_code128( cCode, nFlags ) ; EXIT
   CASE "PDF417"     ; hZebra := hb_zebra_create_pdf417( cCode, nFlags ); nLineHeight := nLineWidth * 3 ; lShowDigits := 0 ; EXIT
   CASE "DATAMATRIX" ; hZebra := hb_zebra_create_datamatrix( cCode, nFlags ); nLineHeight := nLineWidth ; lShowDigits := 0 ; EXIT
   CASE "QRCODE"     ; hZebra := hb_zebra_create_qrcode( cCode, nFlags ); nLineHeight := nLineWidth ; lShowDigits := 0 ; EXIT
   ENDSWITCH

   IF hZebra != NIL
      IF hb_zebra_geterror( hZebra ) == 0
         cTextCode   := hb_zebra_getcode (hZebra)
         nSizeWidth  := HMGZebra_GetWidth  (hZebra, nLineWidth, nLineHeight, NIL)
         nSizeHeight := HMGZebra_GetHeight (hZebra, nLineWidth, nLineHeight, NIL)
         IF lShowDigits > 0
            nFontSize := ( ( nSizeWidth / len(cTextCode))/ 96 * 72 * 1 ) *.8
            if lShowDigits = 2 .and. nSizeHeight *.8 < ( nLineWidth * 10 ) + 20  .or. lShowDigits = 1
               nSizeHeight += ( nLineWidth * 10 ) + 20
            Endif
         Endif
         hBitmap := BT_BitmapCreateNew ( nSizeWidth, nSizeHeight, aBackColor )
         hDC := BT_CreateDC ( hBitmap, BT_HDC_BITMAP, @BTstruct)
         HMGZebra_Draw ( hZebra, hDC, aBarColor, 0, 0, nLineWidth, nLineHeight, NIL )
         IF lShowDigits > 0
            if lShowDigits = 2 // show  code inside the barcode if possible
               if HMGZebra_GetHeight (hZebra, nLineWidth, nLineHeight, NIL)*.8 > ( nLineWidth * 10 ) + 20
                  nSizeHeight -= ( nLineWidth * 10 ) - 50
               Endif
            Endif
            BT_DrawText ( hDC, nSizeHeight - (( nLineWidth * 10 ) + 20 ) + 3, nSizeWidth/2, cTextCode, cFont, nFontSize, aBarColor, aBackColor, ,BT_TEXT_CENTER )
         ENDIF
         BT_DeleteDC (BTstruct)
      ELSE
         MsgInfo ("Type "+ cType + CRLF +"Code "+ cCode+ CRLF+ "Error  "+LTrim(hb_valtostr(hb_zebra_geterror(hZebra))))
      ENDIF
      hb_zebra_destroy (hZebra)
   ELSE
      MsgStop("Invalid barcode type !", cType)
   ENDIF
RETURN hBitmap

*-----------------------------------------------------------------------------------------------*
FUNCTION HMGZebra_Draw ( hZebra, hDC, aBarColor, nRow, nCol, nLineWidth, nLineHeight, iFlags )
*-----------------------------------------------------------------------------------------------*
   IF hb_zebra_GetError( hZebra ) != 0
      RETURN HB_ZEBRA_ERROR_INVALIDZEBRA
   ENDIF
//     hb_zebra_draw ( hZebra,   bCodeBlock,                                                           dX,   dY,     dWidth,     dHeight, iFlags )
RETURN hb_zebra_draw ( hZebra, {| x, y, w, h | BT_DrawFillRectangle ( hDC, y, x, w, h, aBarColor )}, nCol, nRow, nLineWidth, nLineHeight, iFlags )

*-----------------------------------------------------------------------------------------------*
FUNCTION HMGZebra_GetWidth (hZebra, nLineWidth, nLineHeight, iFlags)
*-----------------------------------------------------------------------------------------------*
LOCAL x1:= 0, y1 := 0, nBarWidth := 0, nBarHeight := 0
   // always --> nBarHeight = nLineHeight
   IF hb_zebra_GetError( hZebra ) != 0
      RETURN HB_ZEBRA_ERROR_INVALIDZEBRA
   ENDIF
// hb_zebra_draw ( hZebra,   bCodeBlock,                                                            dX, dY,     dWidth,     dHeight, iFlags )
   hb_zebra_draw ( hZebra, {| x, y, w, h | nBarWidth:=Max( x+w-x1, nBarWidth ), nBarHeight:=y+h-y1 }, x1, y1, nLineWidth, nLineHeight, iFlags )
RETURN nBarWidth

*-----------------------------------------------------------------------------------------------*
FUNCTION HMGZebra_GetHeight (hZebra, nLineWidth, nLineHeight, iFlags)
*-----------------------------------------------------------------------------------------------*
LOCAL x1:= 0, y1 := 0, nBarWidth := 0, nBarHeight := 0
   // always --> nBarHeight = nLineHeight
   IF hb_zebra_GetError( hZebra ) != 0
      RETURN HB_ZEBRA_ERROR_INVALIDZEBRA
   ENDIF
// hb_zebra_draw ( hZebra,   bCodeBlock,                                            dX, dY,     dWidth,     dHeight, iFlags )
   hb_zebra_draw ( hZebra, {| x, y, w, h | nBarWidth:=x+w-x1, nBarHeight:=y+h-y1 }, x1, y1, nLineWidth, nLineHeight, iFlags )
RETURN nBarHeight
