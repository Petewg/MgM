--------------------------------------------------------------------------------
Harbour MiniGUI Extended Syntax Extensions

Harbour MiniGUI Extended is a fork up from Official HMG created March 2005.
It aims to follow a more aggressive development path, and be more responsive to user's input.

As it stands at this point, HMG EE offers Syntax extensions over Official HMG, including: 
--------------------------------------------------------------------------------

BUTTONEX control - so-called OwnerDraw Buttons implementation with support for XP Style.
This button can use images (icons or bitmaps) and text together.
[Note: Official HMG have a support for a similar feature but it doesn't work at Win9x.]

Example:
   DEFINE BUTTONEX Button_Ex
      ROW  10
      COL  10
      WIDTH  70
      HEIGHT 70
      CAPTION "Computer"
      VERTICAL .T.
      ICON "res\comp.ico"
      FLAT .F.
      FONTNAME  "MS Sans serif"
      FONTSIZE  9
      FONTCOLOR {0,128,0}
      FONTBOLD .T.
      BACKCOLOR {240,255,240}
      UPPERTEXT .T.
      TOOLTIP "Button with icon - vertical - uppertext - nohotlight - noxpstyle"
      NOHOTLIGHT .T.
      NOXPSTYLE .T.
   END BUTTONEX

--------------------------------------------------------------------------------

BTNTEXTBOX control - extended TEXTBOX control with inserted button(s).

Example:
   DEFINE BTNTEXTBOX Text_Btn
      ROW  10
      COL  10
      WIDTH 200
      VALUE ''
      ACTION MsgInfo('Click!')
      ACTION2 MsgInfo('Click Help Button!')
      PICTURE {"folder.bmp","help.bmp"}
      BUTTONWIDTH 20
      FONTNAME "MS Sans serif"
      FONTSIZE 9
      TOOLTIP 'Button TextBox'
   END BTNTEXTBOX

--------------------------------------------------------------------------------

CHECKLABEL control - extended LABEL control with inserted bitmap image.

Example:
   DEFINE CHECKLABEL Chk_Label
      ROW  10
      COL  10
      WIDTH 200
      VALUE 'Checked Label with image'
      IMAGE {"yes.bmp","no.bmp"}
      CHECKED .T.
      FONTNAME "MS Sans serif"
      FONTSIZE 9
      TOOLTIP 'Checked Label'
   END CHECKLABEL

Example 2:
   DEFINE SWITCHER Chk_Label_2
      ROW	10
      COL	10
      VALUE	'On / Off switcher'
      CHECKED	.T.
      FONTNAME	'Arial'
      FONTSIZE 12
      ONMOUSEHOVER RC_CURSOR( "MINIGUI_FINGER" )
   END SWITCHER

--------------------------------------------------------------------------------

CHECKLISTBOX control - extended LISTBOX control with inserted checkboxes.

Example:
   DEFINE CHECKLISTBOX Chk_List
      ROW  10
      COL  10
      WIDTH 200
      VALUE 1
      ITEMS {"Yes","No"}
      CHECKBOXITEM {1}
      ITEMHEIGHT 18
      FONTNAME "MS Sans serif"
      FONTSIZE 9
      TOOLTIP 'Checked ListBox'
   END CHECKLISTBOX

--------------------------------------------------------------------------------

COMBOBOXEX control - combobox which support of images for items
[Note: COMBOBOX in Official HMG have the IMAGE property that allows (optionally) add images to the items, giving it the same functionality.]

Example:
           DEFINE COMBOBOXEX ComboBox_Ex
              ROW   10
              COL   10
              WIDTH 150
              FONTNAME  'MS Sans serif'
              FONTSIZE  9
              LISTWIDTH 200
              ITEMS {'One','Two','Three'}
              IMAGE {"br0","br2","br1"}
              VALUE 3
              TOOLTIP 'ComboEx'
           END COMBOBOXEX

--------------------------------------------------------------------------------

GETBOX control - Windows implementation of Harbour`s GET Class

Syntax:
@ <nRow> ,<nCol> GETBOX <ControlName> 
[ ID <nId> ]
[ OF | PARENT | DIALOG <ParentWindowName> ]
[ HEIGHT <nHeight> ] 
[ WIDTH <nWidth> ] 
[ FIELD <FieldName> ]
[ VALUE <nValue> ] 
[ PICTURE <cPicture> ] //**  format function and template string       
[ VALID <valid> | RANGE <min>,<max>] // VALID - postvalidation function or codeblock which must return logical value    
				     // RANGE - allowed range of values          
[ VALIDMESSAGE <cValidMessage> ]
[ MESSAGE <cMessage> ] // text to display on STATUSBAR Item(1) when getbox have focus
[ WHEN <when>   ] // prevalidation function or codeblock (if return .f. GetBox is readonly              
[ READONLY ] 
[ FONT <cFontName> SIZE <nFontSize> ]
[ BOLD ] [ ITALIC ] [ UNDERLINE ] [ STRIKEOUT ]
[ PASSWORD ] 
[ TOOLTIP <cToolTipText> ]
[ BACKCOLOR <aBackColor> ] // * or <aBackColor,aReadOnlyBackColor,aAciveBackColor>
[ FONTCOLOR <aFontColor> ]  // * or <aFontColor,aReadOnlyFontColor,aActiveFontColor>
[ ON CHANGE <uChange> ]    ;
[ ON GOTFOCUS <OnGotFocusProcedur> | <bBlock> ]
[ ON LOSTFOCUS <OnLostFocusProcedure> | <bBlock> ] 
[ RIGHTALIGN ]
[ INVISIBLE ] 
[ NOTABSTOP ]
[ HELPID <nHelpId> ]


** GETBOX  supported PICTURE Format Functions

   Function     Type      Action
   ------------------------------------------------------------
     A            C      Allows only alphabetic characters.
     B            N      Displays numbers left-justified.
     C            N      Displays CR after positive numbers.
     D            D,N    Displays dates in SET DATE format.
     K            ALL    Deletes default text if first key is not a cursor key.
     X            N      Displays DB after negative numbers.
     Z            N      Displays zero as blanks.
     (            N      Displays negative numbers in parentheses with leading spaces.
     )            N      Displays negative numbers in parentheses without leading spaces.
     !            C      Converts alphabetic character to uppercase.

 !>> unsupported Format Functions from Harbour Get class :
     R            C    Nontemplate characters are inserted in the display
                       but not saved in the variable.
     S<n>         C    Allows horizontal scrolling within a GET.  <n> is
     E            D,N  Displays dates with day and month inverted
                       independent of the current DATE SETting, numerics
                       with comma and period reverse (European style).
                       an integer that specifies the width of the region.


** GETBOX  supported PICTURE Template Symbols
   ------------------------------------------------------------
   Template            Action
   ------------------------------------------------------------
     A            Allows only alphabetic characters
     N            Allows only alphabetic and numeric characters
     X            Allows any character
     9            Allows digits for any data type including sign for numerics
     #            Allows digits, signs and spaces for C,N type
     L            Allows only T, F, Y or N
     Y            Allows only Y or N
     !            Converts an alphabetic character to uppercase
     $            Displays a dollar sign in place of a leading space in a numeric
     *            Displays an asterisk in place of a leading space in a numeric
     .            Displays a decimal point
     ,            Displays a comma


* FontColor and BackColor property can be defined as RGB array or array of RGBArrays 
  for Enable ,ReadOnly and Focused (active) stage. 
  
* ReadOnly stage preserve defined FontColor and BackColor

* VALID and RANGE clauses are checked when control lost focus
   User can not leave control if defined validation function (or codeblock) return false 
   or entered value is out of defined range. (These clauses can not be used together!)

* WHEN clause is checked when control become focus . If defined here function or codeblock
   used as WHEN param return false, control status is changed to "noneditable".

Example:
        DEFINE GETBOX Get_1
           ROW 10
           COL 10
           HEIGHT 21
           VALUE DATE()
           PICTURE '@K'
           TOOLTIP "Date Value: Must be greater or equal to "+DTOC(DATE())
           VALID {|| Compare(This.Value)}
           VALIDMESSAGE "Must be greater or equal to "+DTOC(DATE())
           MESSAGE "Date Value"
           BACKCOLOR {{255,255,255},{255,255,200},{200,255,255}}
           FONTCOLOR {{0,0,0},{255,255,200},{0,0,255}}
        END GETBOX

--------------------------------------------------------------------------------

HOTKEYBOX control - standard control for hotkey's input.

Example:
   DEFINE HOTKEYBOX HotKey_1
      COL 10
      ROW 10
      VALUE 0
      WIDTH  100
      HEIGHT 21
      FONTNAME  "MS Sans serif"
      FONTSIZE  9
      TOOLTIP "HotKeyBox"
      TABSTOP .T.
   END HOTKEYBOX

--------------------------------------------------------------------------------

IMAGELIST control - support for resources from bitmap's list

- commands DEFINE IMAGELIST, DRAW IMAGELIST, RELEASE IMAGELIST
- commands ERASE IMAGE, BEGINDRAG IMAGE, ENTERDRAG IMAGE, ENDDRAG IMAGE, MOVE IMAGE

Look at folder Samples\Advanced\ImageList for sample.

--------------------------------------------------------------------------------

ANIGIF control - pseudo-control for animated GIF support (files only)

Example:
   DEFINE ANIGIF Gif_1
      ROW 20
      COL 20
      WIDTH 100
      HEIGHT 100
      PICTURE 'animate.gif'
      BKGNDCOLOR WHITE
   END ANIGIF

--------------------------------------------------------------------------------

ANIMATERES command. User Component which displays continuously an AVI clip from a resource.

   @ <row>,<col> ANIMATERES <name> [ OF <parent> ] ;
           [ WIDTH <nWidth> ] [ HEIGHT <nHeight> ] ;
           FILE <DLL or EXE filename> ID <resource> [ TOOLTIP <tooltip> ]

--------------------------------------------------------------------------------
CLBUTTON control - Vista Command Link Button.

Syntax:
   @ <row>,<col> CLBUTTON <name> ;
      [ <OF | PARENT> <parent> ] ;
      [ WIDTH <w> ] [ HEIGHT <h> ] ;
      CAPTION <caption> NOTETEXT <notes> ;
      [ <IMAGE | PICTURE> <bitmap> ] ;
      ACTION <action> [ <default: DEFAULT> ]

Example:
   DEFINE CLBUTTON clbtn_1
	ROW    20
	COL    20
	WIDTH  210
	HEIGHT 80
	CAPTION 'Command Link'
	NOTETEXT "his is a test note."
	ACTION _dummy()
   END CLBUTTON

There are the following properties and method for this control:
   - pseudo-OOP method SetShield:
      Form.CLbutton.SetShield()
      Domethod ( Form, Control, "SetShield" )
   - write only property 'NoteText':
      Form.CLbutton.NoteText := 'New Note'
      SetProperty( Form, Control, 'NoteText', 'New Note' )
   - read/write property 'Picture'.
      Form.CLbutton.Picture := 'arrow.bmp'
      cImage := GetProperty( Form, Control, 'Picture' )

Note: This control works properly at Windows Vista or later only.
--------------------------------------------------------------------------------

SPLITBUTTON control - Vista Split Button with a drop-down menu.

Syntax:
   @ <row>,<col> SPLITBUTTON <name> [ OF <parent> ] ;
      [ WIDTH <w> ] [ HEIGHT <h> ] ;
      CAPTION <caption> ACTION <action> ;
      [ FONT <cFontName> ] [ SIZE <nFontSize> ] ;
      [ TOOLTIP <tooltip> ] [ <default: DEFAULT> ]

Example:
   DEFINE SPLITBUTTON spbtn_1
	ROW    100
	COL    10
	CAPTION 'Split Button'
	ACTION _dummy()
	TOOLTIP 'Split Button'
   END SPLITBUTTON

   DEFINE DROPDOWN MENU BUTTON spbtn_1
	MENUITEM "Menu 1" ACTION MsgInfo( "Button Drop Down Menu 1" )
	MENUITEM "Menu 2" ACTION MsgInfo( "Button Drop Down Menu 2" )
   END MENU

Note: This control works properly at Windows Vista or later only.
--------------------------------------------------------------------------------

TOOLBAREX control - toolbar with a clauses ROWS, TOOLBARSIZE, IMAGELIST, HOTIMAGELIST and MIXEDBUTTONS, support for CHEVRON menu

Look at folder Samples\Basic\ToolBarEx for samples.

--------------------------------------------------------------------------------

PAGERBOX control allows the user to define a scrolling area for the toolbar buttons

Look at folder Samples\Basic\CONTAINERS\PagerBox for sample.

--------------------------------------------------------------------------------

DEFINE DIALOG command - create a Dialog Box from resouces or without using resources:

- ID clause for Controls ANIMATEBOX, BROWSE, BUTTON, CHECKBOX, CHECKBUTTON, COMBOBOX, DATEPICKER,
  EDITBOX, FRAME, GRID, IMAGE, LABEL, LISTBOX, MONTHCALENDAR, PROGRESSBAR, RADIOGROUP, SLIDER, TEXTBOX, TAB, TREE

- Command REDEFINE Controls for ANIMATEBOX, BROWSE, BUTTON, CHECKBOX, CHECKBUTTON, COMBOBOX, DATEPICKER,
  EDITBOX, FRAME, GRID, IMAGE, LABEL, LISTBOX, MONTHCALENDAR, PROGRESSBAR, RADIOGROUP, SLIDER, TEXTBOX, TAB, TREE

--------------------------------------------------------------------------------

DEFINE FOLDER command. A Folder allows the user to define multiple pages for the same area of dialog box from resources and without using resources.

- Folder from Resources:
           DEFINE FOLDER  <FolderName>
                [ OF| PARENT> < ParentWindowName > ] 
                RESOURCE <res>  
                [ CAPTION <cCaption> ]
- Folder created from memory:
           DEFINE FOLDER  < FolderName >       
                [ OF| PARENT> < ParentWindowName > ] 
                AT <nRow>,<nCol>
                [ WIDTH < nWidth > ] 
                [ HEIGHT <nHeight> ] 
                [ CAPTION <cCaption> ]
- Folder Page (Dialog box) from resources:
             FOLDERPAGE <FolderName>  RESOURCE <id> 
                [ TITLE <cTitle> ]
                [ IMAGE <cImageName> ]
- Folder Page (Dialog box) with Controls created in Memory:
             DEFINE FOLDERPAGE < FolderName >  [ RESOURCE <id> ] 
                [ TITLE <cTitle> ]
                [IMAGE <cImageName> ]

                ... Control Definitions...

             END FOLDERPAGE
           END FOLDER

--------------------------------------------------------------------------------

WEBCAM command. User Component for a default web camera's preview and capture.

            @ <row>,<col> WEBCAM <Camera> [ OF <parent> ] ;
               [ WIDTH <nWidth> ] [ HEIGHT <nHeight> ] ;
               [ RATE <nRate> ] [ START ]

--------------------------------------------------------------------------------

New commands:

CLEAN MEMORY - deallocating computer's RAM at program start (for Win 2k/XP only)

DEFINE BKGBRUSH <brush> SOLID IN [ WINDOW ] <form> - similar to window Backcolor property
DEFINE BKGBRUSH <brush> HATCHED IN [ WINDOW ] <form>
DEFINE BKGBRUSH <brush> PATTERN IN [ WINDOW ] <form> BITMAP | IMAGE | PICTURE <image>

SET AUTOADJUST ON [ NOBUTTONS ] | OFF - the control's sizes are automatically adjusted on form's resizing
SET AUTOZOOMING ON | OFF - the control's sizes and font size are automatically zoomed on form's resizing

SET REGION OF <window> ROUNDRECT <nRect1>,<nRect2>,<nWidth>,<nHeight>
SET REGION OF <window> BITMAP <file | resource> TRANSPARENT COLOR <color> [ TO <region> ]

SET DEFAULT ICON TO <IconName> - the main icon could be used as default icon to all other windows
[Note: It should be used before an any forms definition at a main module.]
SET CENTERWINDOW RELATIVE PARENT | DESKTOP - the windows can be centered relative to the parent window

SET GLOBAL HOTKEYS ON | OFF - the defined hotkeys are available from everywhere (default is OFF)

SET WINDOWPROPERTY <name> [ OF <form> ] VALUE <value> [ DIRECT ]
GET WINDOWPROPERTY <name> [ OF <form> ] VALUE <value> [ DIRECT ]
RELEASE WINDOWPROPERTY <name> [ OF <form> ] [ NOFREE ]

SET EVENTS FUNCTION TO <funcname> - define the user's events handling function
[Note: It require the knowledge of the low-level operating system internals.]

SET MENUSTYLE EXTENDED | STANDARD - define the OwnerDraw Menu style (similar to Delphi)
SET MENUCURSOR FULL | SHORT
SET MENUSEPARATOR [ SINGLE | DOUBLE ] [ LEFTALIGN | CENTERALIGN | RIGHTALIGN ]
SET MENUITEM BORDER 3D | FLAT

SET SHOWDETAILERROR ON | OFF - enable or disable showing the detail error message

SET LOGERROR ON | OFF   - enable or disable logging errors to errorlog file
SET ERRORLOG TO <cFile> - set new errorlog file
SET ERRORLOG TO         - reset errorlog file to default value

SET TOOLTIP ON | OFF    - enable or disable control's tooltip
SET TOOLTIP MAXWIDTH TO <w> [ OF <form> ],
where
  <w> is the max width of tooltip's string in pixels
SET TOOLTIP VISIBLETIME TO <v> OF <form>,
where
  <v> is the visible time of tooltip in milliseconds (max value ~30000)

ADD TOOLTIPICON [ INFO | WARNING | ERROR ] WITH MESSAGE <message> OF <form>
CLEAR TOOLTIPICON OF <form>

DEFINE FONT <font> FONTNAME <name> ... [ANGLE <angle>] [CHARSET <charset>] [DEFAULT]
   The Font definition supports an optional Charset clause and Angle clause for font's rotation.

RELEASE FONT <font>
   The defined fonts will be released automatically at program release (similar to Hotkeys).

DRAW ICON IN WINDOW <form> - output of icon which updated ON PAINT event
DRAW TEXT IN WINDOW <form> - output of label which updated ON PAINT event
DRAW PANEL IN WINDOW <form> - draw box raised (panel)
DRAW BOX IN WINDOW <form> - draw box in
DRAW GRADIENT IN WINDOW <form> - draw gradient with using gdi32.dll or msimg32.dll

Individual context menu for controls (excluding Frame):
DEFINE CONTEXT MENU CONTROL <control> [ OF <parent> ]
DEFINE CONTEXT MENU CONTROLS <control1> [,<controln>] [ OF <parent> ]
SET CONTEXT MENU CONTROL <control> OF <parent> ON | OFF

SET [STATUSBAR] PROGRESSITEM OF <form> POSITION TO [VALUE] <v> command.
SET [STATUSBAR] PROGRESSITEM OF <form> RANGE TO <low>, <high> command.

--------------------------------------------------------------------------------

New methods and properties for standard controls:

WINDOW - properties 'TitleBar', 'Closable', 'SysMenu', 'Sizable', 'MaxButton', 'MinButton', 'Backcolor',
         'Topmost', 'MinWidth', 'MaxWidth', 'MinHeight', 'MaxHeight', 'HelpButton', 'Cargo' and events 
         ON RESTORE, ON MOVE, ON DROPFILES, 'On NotifyIconDblClick' and 'On NotifyBalloonClick' ;
         method SaveAs( cBmpFile ) for windows and controls.

Semi-oop 'Application' object. It will allow to read (and write when possible) various application MAIN window properties.

Read/write properties 'Cargo' and 'Tabstop' for all standard controls.

ANIMATEBOX - NOBORDER and BACKCOLOR clauses.

BUTTON, LABEL, TIMER - read/write property 'Action'.

BUTTON - NOXPSTYLE and HOTKEY <KeyName> clauses.

CHECKBOX - AUTOSIZE, THREESTATE and LEFTJUSTIFY clauses.

COMBOBOX - property 'ListWidth' for definition a width of dropdown list, properties 'BackColor' and 'FontColor', 'UpperCase' and 'LowerCase',
events ON LISTDISPLAY and ON LISTCLOSE.
[Note: Official HMG COMBOBOX includes the following:
- DROPPEDWIDTH property (equivalent to ListWidth)
- ON DROPDOWN event (equivalent to "On ListDisplay")
- ON CLOSEUP event (equivalent to "On ListClose")
giving it the same functionality.]

COMBOBOX with DisplayEdit clause - property 'ReadOnly' and AUTOCOMPLETE [SHOWDROPDOWN] clause.

DATEPICKER - properties 'FormatString', 'RangeMin', 'RangeMax' and clauses DATEFORMAT, RANGE, BackColor, FontColor and others color clauses.

GRID, BROWSE, COMBOBOX, TREE - methods EnableUpdate and DisableUpdate.

GRID, BROWSE - property 'ColumnWidth(n)' and methods:
  - ColumnAutoFit(n)  - set width of column <n>  to fit the column contents 
  - ColumnAutoFitH(n) - set width of column <n> to fit the columnheader text & column contents
  - ColumnsAutoFit()  - set widths of all columns to fit each column contents
  - ColumnsAutoFitH() - set widths of all columns to fit each columnheader text & column contents

BROWSE - COLUMNSORT clause.

GRID - read/write property 'CheckboxItem', NOSORTHEADERS and COLUMNSORT clauses.

IMAGE - ALPHALEVEL clause, ON MOUSEHOVER and ON MOUSELEAVE events.

LABEL - read/write property 'Alignment', BLINK and VCENTERALIGN clauses, ON MOUSEHOVER and ON MOUSELEAVE events.

LISTBOX - MULTITAB [TABSWIDTH <aWidth>] and MULTICOLUMN clauses.

MONTHCALENDAR - 'BackColor', 'FontColor' and others color clauses (for Win 9x/2k/XP only).

PROGRESSBAR - [ STYLE ] MARQUEE clause and VELOCITY property.

RADIOGROUP - AUTOSIZE and 'LeftJustify' clauses.

RICHEDIT - method 'Save', event ON SELECT, drag/drop/paste events, NOVSCROL, NOHSCROLL, FILE and FIELD clauses, 'RichValue' and 'AutoFont' properties.

STATUSBAR items - read/write property 'Width', BACKCOLOR and FONTCOLOR (with CENTERALIGN or RIGHTALIGN) clauses.

SLIDER - ON SCROLL event, ENABLESELRANGE and SELRANGE clauses.

SPINNER - HORIZONTAL clause.

TAB - property 'Backcolor' and readonly 'ItemCount' property.

TEXTBOX - 'NoBorder' clause.

TEXTBOX, COMBOBOX and SPINNER - read/write property 'CueBanner'.

TIMER - possibility to change an interval via property 'Value', 'Once' clause.

TOOLBAR - 'Customize' and 'Wrap' clauses.

TREE - properties 'LineColor', 'Indent', 'ItemHeight', 'FontColor' and 'BackColor'.

--------------------------------------------------------------------------------

New functions:

Functions _GetMenuItemCaption( ItemName , FormName ), _SetMenuItemCaption( ItemName , FormName , Caption ),
          _SetMenuItemBitmap( ItemName , FormName , Bitmap ), _SetMenuItemIcon( ItemName , FormName , Icon ),
          _SetMenuItemFont( ItemName , FormName , Font )

Functions AddMRUItem(<NewItem>, "OnClickFunc(Item)"), AddMenuElement(<NewItem>, "OnClickFunc(Item)"),
          SaveMRUFileList(), ClearMRUList()

Function MsgYesNoCancel() shows a Message Box with three buttons 'Yes', 'No' and 'Cancel'.

Functions _ExtDisableControl ( ControlName, ParentForm ) and _ExtEnableControl ( ControlName , ParentForm )
   Using these functions we can disable/enable control without changing any other properties (i.e FontColor, Backcolor and so on)

Function GetUserName() return a name for current user.

Function _GetShortPathName( cPath ) return a short path name for specified full path.

Function _GetCompactPath( cFile, nMax ),
where
   cFile - string to be compacted (may be for example fullpath, path or file name)
   nMax  - required string size (characters count)

Function IsThemed() - for accurately detecting if an application is theme-enabled.

Function GetDllVersion( cDllName ) --> { MajorVersion, MinorVersion, BuildNumber }

Function HMG_DbfToArray( cFieldList, bFor, bWhile, nNext, nRec, lRest )

Function HMG_ArrayToDBF( aData, cFieldList, bProgress )

Function HMG_DbfToExcel( cFieldList, aHeader, bFor, bWhile, nNext, nRec, lRest )

--------------------------------------------------------------------------------

MDI support:

commands DEFINE WINDOW <...> MAIN MDI - create main MDI form
DEFINE WINDOW <...> MDICHILD          - create child MDI form
DEFINE WINDOW TEMPLATE ... MDICHILD   - create child MDI form from .FMG template

Commands for MDI CHILD Windows handling:

FETCH ACTIVE MDICHILD TO <...>
CLOSE ACTIVE MDICHILD
TILE MDICHILDS HORIZONTAL
TILE MDICHILDS VERTICAL
CASCADE MDICHILDS
ARRANGE MDICHILD ICONS
RESTORE MDICHILDS ALL
CLOSE MDICHILDS ALL

Look at folders Samples\Basic\mdi, Samples\Basic\mdi_2, Samples\Basic\mdi_3 and Samples\Basic\mdi_4 for samples.

--------------------------------------------------------------------------------
 
Windows Clipboard support:

CopyToClipboard(cText) - store cText in the Windows clipboard
RetrieveTextFromClipboard() --> cText - retrieve text from the Windows clipboard 
[Note: Official HMG includes System.Clipboard object providing the similar functionality.]
It was replaced by using the semi-oop 'Clipboard' object in Minigui.

New functions:
CopyRtfToClipboard(cRtfText) - store cRTFText in the Windows clipboard
ClearClipboard() - clear the Windows clipboard

--------------------------------------------------------------------------------
 
Optimizations

The internal PUBLIC variables will be released at the window's and control's destruction.

A Default font name and font size will be established if the FontName, FontSize attributes
are not defined at the control's definition.

Optimized Virtual Window scrolling (scroll step will be established automatically).
[Note: Official HMG have a support for a similar feature by SET SCROLLSTEP TO command.]

--------------------------------------------------------------------------------

Enhanced

ErrorSys.prg - additional information is available in the ErrorLog file at the program crash.

A default font of forms is depended from used OS:
- 'Segoe UI' font for WinVista or upper;
- 'Tahoma' font for WinXP;
- 'MS Sans Serif' font otherwise.

DO REPORT command uses an OEM to ANSI conversion if it's needed only.

DO REPORT command have added a new features:
  - Calculate the greater font for print fit in the choosen paper size
  - Not necessary to put number of lines per page nor number of characters for each line
  - Headers with a font on 2 points greater than rest
  - Top margin clause
  - Option 'EVERY PAGE' for GROUPED BY clause
  - Support of codeblock as input data

Function PutFile() supports an optional 5-th parameter for default filename.

Function InputWindow() supports an optional the 7-th parameter lCenterWindow and 8-th parameter with array of button's caption.
It respects the defined default font by SET FONT TO command for all windows.

INI file - an integer value remains without a fractional part, two functions added _GetSectionNames() and _GetSection().

The ICON and NOTIFYICON clauses supports a resource identifier as integer value in the DEFINE WINDOW command.

The BUTTON control supports an icons (*.ico) from file or resource.

The IMAGE BUTTON control supports an extraction of icons (*.ico) from an external file.

The ReadOnly state of EDIT controls family (TEXT & EDIT) preserve userdefined FontColor and BackColor properties.
[Note: Official HMG have a support for a similar features by DisabledBackColor and DisabledFontColor properties for Edit and TextBox controls.]
We can also define these properties as array of RGB arrays { aEnabled, aReadonly }.

The MonthCal control supports setting of the first day of the week.

The Spinner control shows a min/max value on 'LostFocus' event if user introduced the 'out of range' value from keyboard.

The MessageBox functions supports the optional parameters:
  nIcon - icon resource name (from resources)
  lSysModal - if set to false when MB_APPLMODAL+MB_TOPMOST style is used
  nDefaultButton - initial default button at MessageBoxes with 2 or 3 buttons

The SET NAVIGATION EXTENDED command supports backward moving by pressing Shift-Enter.

The EXECUTE FILE WAIT command supports the optional clauses: WHILE and INTERVAL.

The window MOUSECLICK event supports a right mouse click and middle mouse click.

The ACTIVATE WINDOW command supports an optional NOWAIT clause.

The EDIT EXTENDED command shows the deleted records.

The Menu Items supports Messages in the first Statusbar item.

The MENUITEM command supports the DISABLED clause.

The MENUITEM command supports the BREAKMENU [ SEPARATOR ] clause.

The MENUITEM command supports the CHECKMARK <image> and FONT <font> clauses.

The MENUITEM command supports the optional DEFAULT clause.

The MENU POPUP command supports the IMAGE <image> and FONT <font> clauses.

The Main menu supports MRU[ITEM] menu command.

The default action on Statusbar Keyboard items toggles NumLock, CapsLock and Insert status on WinXP or later.

The StatusBar's command CLOCK supports an optional AMPM clause.

The StatusBar control supports a PROGRESSITEM clause.

The Context menu and Notify menu supports Multistaged submenu.

The Browse and Grid controls supports an optional NOTABSTOP clause.

The Grid control supports an optional VALIDMESSAGES, COLUMNWIDTHLIMITS clauses and ON DRAGHEADERITEMS event.

The Browse and Grid controls supports the code-blocks with an input Value as parameter in the VALIDMESSAGES array.

The TextBox, ComboBox and Spinner controls support an optional CUEBANNER clause.

The Grid control returns an Item property for Virtual Grid at runtime.

The CheckBox and Spinner controls supports the Extended Navigation.

The Tab control supports the adding of ToolTip to each separate page instead of one ToolTip to the all Tab.

The codeblock of Tab's 'On Cnange' event accepts a current page number as parameter.

The 'Address' property of Hyperlink control can contain the file of folder name or the procedure name.

The DRAW GRAPH command supports an alternative syntax.

The DRAW GRAPH command supports the optional SHOWDATAVALUES and DATAMASK clauses.

The DRAW GRAPH and DRAW PIE commands support of the multiple charts on the same form.

The COMPRESS command supports the optional PASSWORD, FILEPROGRESS and RESULT clauses.

The UNCOMPRESS command supports the optional FILEMASK | FILEARRAY, FILEPROGRESS and RESULT clauses.

The Errorlog file shows a time from start of the application at the program crash.

The Errorlog file shows the system and environmental parameters at the program crash.

--------------------------------------------------------------------------------
 
Fixed

'On Change' event of the controls was executed at the activation of form.

Program crash at using of 'On DblClick' clause in the Splitboxed Grid control.

Middle mouse button scrolling in the Slider control do not execute 'On Change' procedure.

Filling of Tabs caption property in the function _AddTabPage().

Updating of Tab control without any tabs in the function UpdateTab().

Specifying the Max value for the identifier of the Hotkeys according to WinAPI claims.

The RadioGroup and Spinner controls do not change of ToolTip at runtime (after definition).

--------------------------------------------------------------------------------

Addons libraries

The Shell32 library lets you copy, move, delete a files and folders using the WinAPI SHFileOperation() function.
Look at folder Samples\Basic\shell32 for sample.

The TMsAgent library lets you to manage the Microsoft Agents.
Look at folder Samples\Advanced\MsAgent for sample.
[Note: It is an obsolete feature which was broken by Microsoft since WinVista.]

The HMG_QHTM library is based upon a freeware Qhtm.Dll from http://www.gipsysoft.com/qhtm/freedownload.shtml.
Look at folder Samples\Advanced\qhtm_2 for sample.

--------------------------------------------------------------------------------
 
HBprinter library support

The full description is beyond the scope of this document - please refer to doc\MiniGUI.chm for help and samples\Advanced\HBPrint\demo.prg for sample.

--------------------------------------------------------------------------------

TSBrowse library support

The full description is beyond the scope of this document - please refer to doc\TSBrowse.chm for help and samples\Advanced\TsBrowse\demo.prg for sample.

--------------------------------------------------------------------------------
 
PropGrid library support

The full description is beyond the scope of this document - please refer to doc\MiniGUI.chm for help and samples\Advanced\PropGrid\demo.prg for sample.

--------------------------------------------------------------------------------
 
PropSheet library support

The full description is beyond the scope of this document - please refer to doc\MiniGUI.chm for help and samples\Advanced\PropSheet\demo.prg for sample.

--------------------------------------------------------------------------------
Thanks to many people at the following forums for contributions and feedbacks:

- English http://groups.yahoo.com/group/harbourminigui/

- Brazilian http://br.groups.yahoo.com/group/miniguibrasil/

- Spanish http://es.groups.yahoo.com/group/harbourminigui_es/

- Russian http://clipper.borda.ru/
