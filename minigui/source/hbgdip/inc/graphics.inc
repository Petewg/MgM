
typedef GpStatus (WINGDIPAPI * GdipFlush_ptr)(GpGraphics *graphics, GpFlushIntention intention);
typedef GpStatus (WINGDIPAPI * GdipCreateFromHDC_ptr)(HDC hdc, GpGraphics **graphics);
//typedef GpStatus (WINGDIPAPI * GdipCreateFromHDC2_ptr)(HDC hdc, HANDLE hDevice, GpGraphics **graphics);
typedef GpStatus (WINGDIPAPI * GdipCreateFromHWND_ptr)(HWND hwnd, GpGraphics **graphics);
//typedef GpStatus (WINGDIPAPI * GdipCreateFromHWNDICM_ptr)(HWND hwnd, GpGraphics **graphics);
typedef GpStatus (WINGDIPAPI * GdipDeleteGraphics_ptr)(GpGraphics *graphics);
//typedef GpStatus (WINGDIPAPI * GdipGetDC_ptr)(GpGraphics* graphics, HDC * hdc);
//typedef GpStatus (WINGDIPAPI * GdipReleaseDC_ptr)(GpGraphics* graphics, HDC hdc);
//typedef GpStatus (WINGDIPAPI * GdipSetCompositingMode_ptr)(GpGraphics *graphics, CompositingMode compositingMode);
//typedef GpStatus (WINGDIPAPI * GdipGetCompositingMode_ptr)(GpGraphics *graphics, CompositingMode *compositingMode);
//typedef GpStatus (WINGDIPAPI * GdipSetRenderingOrigin_ptr)(GpGraphics *graphics, INT x, INT y);
//typedef GpStatus (WINGDIPAPI * GdipGetRenderingOrigin_ptr)(GpGraphics *graphics, INT *x, INT *y);
//typedef GpStatus (WINGDIPAPI * GdipSetCompositingQuality_ptr)(GpGraphics *graphics, CompositingQuality compositingQuality);
//typedef GpStatus (WINGDIPAPI * GdipGetCompositingQuality_ptr)(GpGraphics *graphics, CompositingQuality *compositingQuality);
//typedef GpStatus (WINGDIPAPI * GdipSetSmoothingMode_ptr)(GpGraphics *graphics, SmoothingMode smoothingMode);
//typedef GpStatus (WINGDIPAPI * GdipGetSmoothingMode_ptr)(GpGraphics *graphics, SmoothingMode *smoothingMode);
//typedef GpStatus (WINGDIPAPI * GdipSetPixelOffsetMode_ptr)(GpGraphics* graphics, PixelOffsetMode pixelOffsetMode);
//typedef GpStatus (WINGDIPAPI * GdipGetPixelOffsetMode_ptr)(GpGraphics *graphics, PixelOffsetMode *pixelOffsetMode);
//typedef GpStatus (WINGDIPAPI * GdipSetTextRenderingHint_ptr)(GpGraphics *graphics, TextRenderingHint mode);
//typedef GpStatus (WINGDIPAPI * GdipGetTextRenderingHint_ptr)(GpGraphics *graphics, TextRenderingHint *mode);
//typedef GpStatus (WINGDIPAPI * GdipSetTextContrast_ptr)(GpGraphics *graphics, UINT contrast);
//typedef GpStatus (WINGDIPAPI * GdipGetTextContrast_ptr)(GpGraphics *graphics, UINT * contrast);
//typedef GpStatus (WINGDIPAPI * GdipSetInterpolationMode_ptr)(GpGraphics *graphics, InterpolationMode interpolationMode);
//typedef GpStatus (WINGDIPAPI * GdipGetInterpolationMode_ptr)(GpGraphics *graphics, InterpolationMode *interpolationMode);
//typedef GpStatus (WINGDIPAPI * GdipSetWorldTransform_ptr)(GpGraphics *graphics, GpMatrix *matrix);
//typedef GpStatus (WINGDIPAPI * GdipResetWorldTransform_ptr)(GpGraphics *graphics);
//typedef GpStatus (WINGDIPAPI * GdipMultiplyWorldTransform_ptr)(GpGraphics *graphics, GDIPCONST GpMatrix *matrix, GpMatrixOrder order);
typedef GpStatus (WINGDIPAPI * GdipTranslateWorldTransform_ptr)(GpGraphics *graphics, REAL dx, REAL dy, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipScaleWorldTransform_ptr)(GpGraphics *graphics, REAL sx, REAL sy, GpMatrixOrder order);
typedef GpStatus (WINGDIPAPI * GdipRotateWorldTransform_ptr)(GpGraphics *graphics, REAL angle, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipGetWorldTransform_ptr)(GpGraphics *graphics, GpMatrix *matrix);
//typedef GpStatus (WINGDIPAPI * GdipResetPageTransform_ptr)(GpGraphics *graphics);
//typedef GpStatus (WINGDIPAPI * GdipGetPageUnit_ptr)(GpGraphics *graphics, GpUnit *unit);
//typedef GpStatus (WINGDIPAPI * GdipGetPageScale_ptr)(GpGraphics *graphics, REAL *scale);
//typedef GpStatus (WINGDIPAPI * GdipSetPageUnit_ptr)(GpGraphics *graphics, GpUnit unit);
//typedef GpStatus (WINGDIPAPI * GdipSetPageScale_ptr)(GpGraphics *graphics, REAL scale);
//typedef GpStatus (WINGDIPAPI * GdipGetDpiX_ptr)(GpGraphics *graphics, REAL* dpi);
//typedef GpStatus (WINGDIPAPI * GdipGetDpiY_ptr)(GpGraphics *graphics, REAL* dpi);
//typedef GpStatus (WINGDIPAPI * GdipTransformPoints_ptr)(GpGraphics *graphics, GpCoordinateSpace destSpace, GpCoordinateSpace srcSpace, GpPointF *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipTransformPointsI_ptr)(GpGraphics *graphics, GpCoordinateSpace destSpace, GpCoordinateSpace srcSpace, GpPoint *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipGetNearestColor_ptr)(GpGraphics *graphics, ARGB* argb);
//typedef HPALETTE (WINGDIPAPI * GdipCreateHalftonePalette_ptr)(void);
//typedef GpStatus (WINGDIPAPI * GdipDrawLine_ptr)(GpGraphics *graphics, GpPen *pen, REAL x1, REAL y1, REAL x2, REAL y2);
//typedef GpStatus (WINGDIPAPI * GdipDrawLineI_ptr)(GpGraphics *graphics, GpPen *pen, INT x1, INT y1, INT x2, INT y2);
//typedef GpStatus (WINGDIPAPI * GdipDrawLines_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPointF *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawLinesI_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPoint *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawArc_ptr)(GpGraphics *graphics, GpPen *pen, REAL x, REAL y, REAL width, REAL height, REAL startAngle, REAL sweepAngle);
//typedef GpStatus (WINGDIPAPI * GdipDrawArcI_ptr)(GpGraphics *graphics, GpPen *pen, INT x, INT y, INT width, INT height, REAL startAngle, REAL sweepAngle);
//typedef GpStatus (WINGDIPAPI * GdipDrawBezier_ptr)(GpGraphics *graphics, GpPen *pen, REAL x1, REAL y1, REAL x2, REAL y2, REAL x3, REAL y3, REAL x4, REAL y4);
//typedef GpStatus (WINGDIPAPI * GdipDrawBezierI_ptr)(GpGraphics *graphics, GpPen *pen, INT x1, INT y1, INT x2, INT y2, INT x3, INT y3, INT x4, INT y4);
//typedef GpStatus (WINGDIPAPI * GdipDrawBeziers_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPointF *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawBeziersI_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPoint *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawRectangle_ptr)(GpGraphics *graphics, GpPen *pen, REAL x, REAL y, REAL width, REAL height);
//typedef GpStatus (WINGDIPAPI * GdipDrawRectangleI_ptr)(GpGraphics *graphics, GpPen *pen, INT x, INT y, INT width, INT height);
//typedef GpStatus (WINGDIPAPI * GdipDrawRectangles_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpRectF *rects, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawRectanglesI_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpRect *rects, INT count);
typedef GpStatus (WINGDIPAPI * GdipDrawEllipse_ptr)(GpGraphics *graphics, GpPen *pen, REAL x, REAL y, REAL width, REAL height);
//typedef GpStatus (WINGDIPAPI * GdipDrawEllipseI_ptr)(GpGraphics *graphics, GpPen *pen, INT x, INT y, INT width, INT height);
//typedef GpStatus (WINGDIPAPI * GdipDrawPie_ptr)(GpGraphics *graphics, GpPen *pen, REAL x, REAL y, REAL width, REAL height, REAL startAngle, REAL sweepAngle);
//typedef GpStatus (WINGDIPAPI * GdipDrawPieI_ptr)(GpGraphics *graphics, GpPen *pen, INT x, INT y, INT width, INT height, REAL startAngle, REAL sweepAngle);
//typedef GpStatus (WINGDIPAPI * GdipDrawPolygon_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPointF *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawPolygonI_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPoint *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawPath_ptr)(GpGraphics *graphics, GpPen *pen, GpPath *path);
//typedef GpStatus (WINGDIPAPI * GdipDrawCurve_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPointF *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawCurveI_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPoint *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawCurve2_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPointF *points, INT count, REAL tension);
//typedef GpStatus (WINGDIPAPI * GdipDrawCurve2I_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPoint *points, INT count, REAL tension);
//typedef GpStatus (WINGDIPAPI * GdipDrawCurve3_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPointF *points, INT count, INT offset, INT numberOfSegments, REAL tension);
//typedef GpStatus (WINGDIPAPI * GdipDrawCurve3I_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPoint *points, INT count, INT offset, INT numberOfSegments, REAL tension);
//typedef GpStatus (WINGDIPAPI * GdipDrawClosedCurve_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPointF *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawClosedCurveI_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPoint *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawClosedCurve2_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPointF *points, INT count, REAL tension);
//typedef GpStatus (WINGDIPAPI * GdipDrawClosedCurve2I_ptr)(GpGraphics *graphics, GpPen *pen, GDIPCONST GpPoint *points, INT count, REAL tension);
//typedef GpStatus (WINGDIPAPI * GdipGraphicsClear_ptr)(GpGraphics *graphics, ARGB color);
//typedef GpStatus (WINGDIPAPI * GdipFillRectangle_ptr)(GpGraphics *graphics, GpBrush *brush, REAL x, REAL y, REAL width, REAL height);
//typedef GpStatus (WINGDIPAPI * GdipFillRectangleI_ptr)(GpGraphics *graphics, GpBrush *brush, INT x, INT y, INT width, INT height);
//typedef GpStatus (WINGDIPAPI * GdipFillRectangles_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpRectF *rects, INT count);
//typedef GpStatus (WINGDIPAPI * GdipFillRectanglesI_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpRect *rects, INT count);
//typedef GpStatus (WINGDIPAPI * GdipFillPolygon_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpPointF *points, INT count, GpFillMode fillMode);
//typedef GpStatus (WINGDIPAPI * GdipFillPolygonI_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpPoint *points, INT count, GpFillMode fillMode);
//typedef GpStatus (WINGDIPAPI * GdipFillPolygon2_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpPointF *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipFillPolygon2I_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpPoint *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipFillEllipse_ptr)(GpGraphics *graphics, GpBrush *brush, REAL x, REAL y, REAL width, REAL height);
//typedef GpStatus (WINGDIPAPI * GdipFillEllipseI_ptr)(GpGraphics *graphics, GpBrush *brush, INT x, INT y, INT width, INT height);
//typedef GpStatus (WINGDIPAPI * GdipFillPie_ptr)(GpGraphics *graphics, GpBrush *brush, REAL x, REAL y, REAL width, REAL height, REAL startAngle, REAL sweepAngle);
//typedef GpStatus (WINGDIPAPI * GdipFillPieI_ptr)(GpGraphics *graphics, GpBrush *brush, INT x, INT y, INT width, INT height, REAL startAngle, REAL sweepAngle);
//typedef GpStatus (WINGDIPAPI * GdipFillPath_ptr)(GpGraphics *graphics, GpBrush *brush, GpPath *path);
//typedef GpStatus (WINGDIPAPI * GdipFillClosedCurve_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpPointF *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipFillClosedCurveI_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpPoint *points, INT count);
//typedef GpStatus (WINGDIPAPI * GdipFillClosedCurve2_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpPointF *points, INT count, REAL tension, GpFillMode fillMode);
//typedef GpStatus (WINGDIPAPI * GdipFillClosedCurve2I_ptr)(GpGraphics *graphics, GpBrush *brush, GDIPCONST GpPoint *points, INT count, REAL tension, GpFillMode fillMode);
//typedef GpStatus (WINGDIPAPI * GdipFillRegion_ptr)(GpGraphics *graphics, GpBrush *brush, GpRegion *region);
typedef GpStatus (WINGDIPAPI * GdipDrawImage_ptr)(GpGraphics *graphics, GpImage *image, REAL x, REAL y);
//typedef GpStatus (WINGDIPAPI * GdipDrawImageI_ptr)(GpGraphics *graphics, GpImage *image, INT x, INT y);
//typedef GpStatus (WINGDIPAPI * GdipDrawImageRect_ptr)(GpGraphics *graphics, GpImage *image, REAL x, REAL y, REAL width, REAL height);
//typedef GpStatus (WINGDIPAPI * GdipDrawImageRectI_ptr)(GpGraphics *graphics, GpImage *image, INT x, INT y, INT width, INT height);
//typedef GpStatus (WINGDIPAPI * GdipDrawImagePoints_ptr)(GpGraphics *graphics, GpImage *image, GDIPCONST GpPointF *dstpoints, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawImagePointsI_ptr)(GpGraphics *graphics, GpImage *image, GDIPCONST GpPoint *dstpoints, INT count);
//typedef GpStatus (WINGDIPAPI * GdipDrawImagePointRect_ptr)(GpGraphics *graphics, GpImage *image, REAL x, REAL y, REAL srcx, REAL srcy, REAL srcwidth, REAL srcheight, GpUnit srcUnit);
//typedef GpStatus (WINGDIPAPI * GdipDrawImagePointRectI_ptr)(GpGraphics *graphics, GpImage *image, INT x, INT y, INT srcx, INT srcy, INT srcwidth, INT srcheight, GpUnit srcUnit);
typedef GpStatus (WINGDIPAPI * GdipDrawImageRectRect_ptr)(GpGraphics *graphics, GpImage *image, REAL dstx, REAL dsty, REAL dstwidth, REAL dstheight, REAL srcx, REAL srcy, REAL srcwidth, REAL srcheight, GpUnit srcUnit, GDIPCONST GpImageAttributes* imageAttributes, DrawImageAbort callback, VOID * callbackData);
//typedef GpStatus (WINGDIPAPI * GdipDrawImageRectRectI_ptr)(GpGraphics *graphics, GpImage *image, INT dstx, INT dsty, INT dstwidth, INT dstheight, INT srcx, INT srcy, INT srcwidth, INT srcheight, GpUnit srcUnit, GDIPCONST GpImageAttributes* imageAttributes, DrawImageAbort callback, VOID * callbackData);
//typedef GpStatus (WINGDIPAPI * GdipDrawImagePointsRect_ptr)(GpGraphics *graphics, GpImage *image, GDIPCONST GpPointF *points, INT count, REAL srcx, REAL srcy, REAL srcwidth, REAL srcheight, GpUnit srcUnit, GDIPCONST GpImageAttributes* imageAttributes, DrawImageAbort callback, VOID * callbackData);
//typedef GpStatus (WINGDIPAPI * GdipDrawImagePointsRectI_ptr)(GpGraphics *graphics, GpImage *image, GDIPCONST GpPoint *points, INT count, INT srcx, INT srcy, INT srcwidth, INT srcheight, GpUnit srcUnit, GDIPCONST GpImageAttributes* imageAttributes, DrawImageAbort callback, VOID * callbackData);
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileDestPoint_ptr)(GpGraphics *graphics, GDIPCONST GpMetafile *metafile, GDIPCONST PointF *destPoint, EnumerateMetafileProc callback, VOID *callbackData, GDIPCONST GpImageAttributes *imageAttributes);
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileDestPointI_ptr)(GpGraphics *graphics, GDIPCONST GpMetafile *metafile, GDIPCONST Point *destPoint, EnumerateMetafileProc callback, VOID *callbackData, GDIPCONST GpImageAttributes *imageAttributes);
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileDestRect_ptr)(GpGraphics *graphics, GDIPCONST GpMetafile *metafile, GDIPCONST RectF *destRect, EnumerateMetafileProc callback, VOID *callbackData, GDIPCONST GpImageAttributes *imageAttributes);
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileDestRectI_ptr)(GpGraphics *graphics, GDIPCONST GpMetafile *metafile, GDIPCONST Rect *destRect, EnumerateMetafileProc callback, VOID *callbackData, GDIPCONST GpImageAttributes *imageAttributes);
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileDestPoints_ptr)(GpGraphics *graphics, GDIPCONST GpMetafile *metafile, GDIPCONST PointF *destPoints, INT count, EnumerateMetafileProc callback, VOID *callbackData, GDIPCONST GpImageAttributes *imageAttributes);
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileDestPointsI_ptr)(GpGraphics *graphics, GDIPCONST GpMetafile *metafile, GDIPCONST Point *destPoints, INT count, EnumerateMetafileProc callback, VOID *callbackData, GDIPCONST GpImageAttributes *imageAttributes);
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileSrcRectDestPoint_ptr)(GpGraphics *graphics ,GDIPCONST GpMetafile *metafile ,GDIPCONST PointF *destPoint ,GDIPCONST RectF *srcRect ,Unit srcUnit ,EnumerateMetafileProc callback ,VOID *callbackData ,GDIPCONST GpImageAttributes *imageAttribute); 
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileSrcRectDestPointI_ptr)(GpGraphics *graphics ,GDIPCONST GpMetafile *metafile ,GDIPCONST Point *destPoint ,GDIPCONST Rect *srcRect ,Unit srcUnit ,EnumerateMetafileProc callback ,VOID *callbackData ,GDIPCONST GpImageAttributes *imageAttribute); 
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileSrcRectDestRect_ptr)(GpGraphics *graphics ,GDIPCONST GpMetafile *metafile ,GDIPCONST RectF *destRect ,GDIPCONST RectF *srcRect ,Unit srcUnit ,EnumerateMetafileProc callback ,VOID *callbackData ,GDIPCONST GpImageAttributes *imageAttribute); 
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileSrcRectDestRectI_ptr)(GpGraphics *graphics ,GDIPCONST GpMetafile *metafile ,GDIPCONST Rect *destRect ,GDIPCONST Rect *srcRect ,Unit srcUnit ,EnumerateMetafileProc callback ,VOID *callbackData ,GDIPCONST GpImageAttributes *imageAttribute); 
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileSrcRectDestPoints_ptr)(GpGraphics *graphics ,GDIPCONST GpMetafile *metafile ,GDIPCONST PointF *destPoints ,INT count ,GDIPCONST RectF *srcRect ,Unit srcUnit ,EnumerateMetafileProc callback ,VOID *callbackData ,GDIPCONST GpImageAttributes *imageAttribute);
//typedef GpStatus (WINGDIPAPI * GdipEnumerateMetafileSrcRectDestPointsI_ptr)(GpGraphics *graphics ,GDIPCONST GpMetafile *metafile ,GDIPCONST Point *destPoints ,INT count ,GDIPCONST Rect *srcRect ,Unit srcUnit ,EnumerateMetafileProc callback ,VOID *callbackData ,GDIPCONST GpImageAttributes *imageAttribute); 
//typedef GpStatus (WINGDIPAPI * GdipPlayMetafileRecord_ptr)(GDIPCONST GpMetafile *metafile ,EmfPlusRecordType recordType ,UINT flags ,UINT dataSize ,GDIPCONST BYTE *dat);
//typedef GpStatus (WINGDIPAPI * GdipSetClipGraphics_ptr)(GpGraphics *graphics, GpGraphics *srcgraphics ,CombineMode combineMode); 
//typedef GpStatus (WINGDIPAPI * GdipSetClipRect_ptr)(GpGraphics *graphics, REAL x, REAL y ,REAL width, REAL height, CombineMode combineMode); 
//typedef GpStatus (WINGDIPAPI * GdipSetClipRectI_ptr)(GpGraphics *graphics, INT x, INT y ,INT width, INT height, CombineMode combineMode); 
//typedef GpStatus (WINGDIPAPI * GdipSetClipPath_ptr)(GpGraphics *graphics, GpPath *path, CombineMode combineMode); 
//typedef GpStatus (WINGDIPAPI * GdipSetClipRegion_ptr)(GpGraphics *graphics, GpRegion *region ,CombineMode combineMode); 
//typedef GpStatus (WINGDIPAPI * GdipSetClipHrgn_ptr)(GpGraphics *graphics, HRGN hRgn, CombineMode combineMode); 
//typedef GpStatus (WINGDIPAPI * GdipResetClip_ptr)(GpGraphics *graphics); 
//typedef GpStatus (WINGDIPAPI * GdipTranslateClip_ptr)(GpGraphics *graphics, REAL dx, REAL dy); 
//typedef GpStatus (WINGDIPAPI * GdipTranslateClipI_ptr)(GpGraphics *graphics, INT dx, INT dy); 
//typedef GpStatus (WINGDIPAPI * GdipGetClip_ptr)(GpGraphics *graphics, GpRegion *region); 
//typedef GpStatus (WINGDIPAPI * GdipGetClipBounds_ptr)(GpGraphics *graphics, GpRectF *rect); 
//typedef GpStatus (WINGDIPAPI * GdipGetClipBoundsI_ptr)(GpGraphics *graphics, GpRect *rect); 
//typedef GpStatus (WINGDIPAPI * GdipIsClipEmpty_ptr)(GpGraphics *graphics, BOOL *result); 
//typedef GpStatus (WINGDIPAPI * GdipGetVisibleClipBounds_ptr)(GpGraphics *graphics, GpRectF *rect); 
//typedef GpStatus (WINGDIPAPI * GdipGetVisibleClipBoundsI_ptr)(GpGraphics *graphics, GpRect *rect); 
//typedef GpStatus (WINGDIPAPI * GdipIsVisibleClipEmpty_ptr)(GpGraphics *graphics, BOOL *result); 
//typedef GpStatus (WINGDIPAPI * GdipIsVisiblePoint_ptr)(GpGraphics *graphics, REAL x, REAL y ,BOOL *result); 
//typedef GpStatus (WINGDIPAPI * GdipIsVisiblePointI_ptr)(GpGraphics *graphics, INT x, INT y ,BOOL *result); 
//typedef GpStatus (WINGDIPAPI * GdipIsVisibleRect_ptr)(GpGraphics *graphics, REAL x, REAL y ,REAL width, REAL height, BOOL *result); 
//typedef GpStatus (WINGDIPAPI * GdipIsVisibleRectI_ptr)(GpGraphics *graphics, INT x, INT y ,INT width, INT height, BOOL *result); 
//typedef GpStatus (WINGDIPAPI * GdipSaveGraphics_ptr)(GpGraphics *graphics, GraphicsState *state); 
//typedef GpStatus (WINGDIPAPI * GdipRestoreGraphics_ptr)(GpGraphics *graphics, GraphicsState state); 
//typedef GpStatus (WINGDIPAPI * GdipBeginContainer_ptr)(GpGraphics *graphics, GDIPCONST GpRectF *dstrect ,GDIPCONST GpRectF *srcrect, GpUnit unit, GraphicsContainer *state); 
//typedef GpStatus (WINGDIPAPI * GdipBeginContainerI_ptr)(GpGraphics *graphics, GDIPCONST GpRect *dstrect ,GDIPCONST GpRect *srcrect, GpUnit unit, GraphicsContainer *state); 
//typedef GpStatus (WINGDIPAPI * GdipBeginContainer2_ptr)(GpGraphics *graphics, GraphicsContainer *state); 
//typedef GpStatus (WINGDIPAPI * GdipEndContainer_ptr)(GpGraphics *graphics, GraphicsContainer state); 
//typedef GpStatus (WINGDIPAPI * GdipGetMetafileHeaderFromWmf_ptr)(HMETAFILE hWmf ,GDIPCONST WmfPlaceableFileHeader *wmfPlaceableFileHeader ,MetafileHeader *header); 
//typedef GpStatus (WINGDIPAPI * GdipGetMetafileHeaderFromEmf_ptr)(HENHMETAFILE hEmf ,MetafileHeader *header); 
//typedef GpStatus (WINGDIPAPI * GdipGetMetafileHeaderFromFile_ptr)(GDIPCONST WCHAR *filename ,MetafileHeader *header); 
//typedef GpStatus (WINGDIPAPI * GdipGetMetafileHeaderFromStream_ptr)(IStream *stream ,MetafileHeader *header); 
//typedef GpStatus (WINGDIPAPI * GdipGetMetafileHeaderFromMetafile_ptr)(GpMetafile *metafile ,MetafileHeader *header); 
//typedef GpStatus (WINGDIPAPI * GdipGetHemfFromMetafile_ptr)(GpMetafile *metafile ,HENHMETAFILE *hEmf); 
//typedef GpStatus (WINGDIPAPI * GdipCreateStreamOnFile_ptr)(GDIPCONST WCHAR *filename, UINT access, IStream **stream); 
//typedef GpStatus (WINGDIPAPI * GdipCreateMetafileFromWmf_ptr)(HMETAFILE hWmf, BOOL deleteWmf ,GDIPCONST WmfPlaceableFileHeader *wmfPlaceableFileHeader, GpMetafile **metafile); 
//typedef GpStatus (WINGDIPAPI * GdipCreateMetafileFromEmf_ptr)(HENHMETAFILE hEmf, BOOL deleteEmf ,GpMetafile **metafile); 
//typedef GpStatus (WINGDIPAPI * GdipCreateMetafileFromFile_ptr)(GDIPCONST WCHAR *file, GpMetafile **metafile); 
//typedef GpStatus (WINGDIPAPI * GdipCreateMetafileFromWmfFile_ptr)(GDIPCONST WCHAR *file, GDIPCONST WmfPlaceableFileHeader *wmfPlaceableFileHeader, GpMetafile **metafile);
//typedef GpStatus (WINGDIPAPI * GdipCreateMetafileFromStream_ptr)(IStream *stream, GpMetafile **metafile); 
//typedef GpStatus (WINGDIPAPI * GdipRecordMetafile_ptr)(HDC referenceHdc ,EmfType type ,GDIPCONST GpRectF *frameRect ,MetafileFrameUnit frameUnit ,GDIPCONST WCHAR *description ,GpMetafile * *metafile); 
//typedef GpStatus (WINGDIPAPI * GdipRecordMetafileI_ptr)(HDC referenceHdc ,EmfType type ,GDIPCONST GpRect *frameRect ,MetafileFrameUnit frameUnit ,GDIPCONST WCHAR *description ,GpMetafile * *metafile); 
//typedef GpStatus (WINGDIPAPI * GdipRecordMetafileFileName_ptr)(GDIPCONST WCHAR *fileName ,HDC referenceHdc ,EmfType type ,GDIPCONST GpRectF *frameRect ,MetafileFrameUnit frameUnit ,GDIPCONST WCHAR *description ,GpMetafile * *metafile); 
//typedef GpStatus (WINGDIPAPI * GdipRecordMetafileFileNameI_ptr)(GDIPCONST WCHAR *fileName ,HDC referenceHdc ,EmfType type ,GDIPCONST GpRect *frameRect ,MetafileFrameUnit frameUnit ,GDIPCONST WCHAR *description ,GpMetafile * *metafile); 
//typedef GpStatus (WINGDIPAPI * GdipRecordMetafileStream_ptr)(IStream *stream ,HDC referenceHdc ,EmfType type ,GDIPCONST GpRectF *frameRect ,MetafileFrameUnit frameUnit ,GDIPCONST WCHAR *description ,GpMetafile * *metafile); 
//typedef GpStatus (WINGDIPAPI * GdipRecordMetafileStreamI_ptr)(IStream *stream ,HDC referenceHdc ,EmfType type ,GDIPCONST GpRect *frameRect ,MetafileFrameUnit frameUnit ,GDIPCONST WCHAR *description ,GpMetafile * *metafile); 
//typedef GpStatus (WINGDIPAPI * GdipSetMetafileDownLevelRasterizationLimit_ptr)(GpMetafile *metafile ,UINT metafileRasterizationLimitDpi); 
//typedef GpStatus (WINGDIPAPI * GdipGetMetafileDownLevelRasterizationLimit_ptr)(GDIPCONST GpMetafile *metafile ,UINT *metafileRasterizationLimitDpi); 
//typedef GpStatus (WINGDIPAPI * GdipGetImageDecodersSize_ptr)(UINT *numDecoders, UINT *size); 
//typedef GpStatus (WINGDIPAPI * GdipGetImageDecoders_ptr)(UINT numDecoders ,UINT size, ImageCodecInfo *decoders); 
//typedef GpStatus (WINGDIPAPI * GdipGetImageEncodersSize_ptr)(UINT *numEncoders, UINT *size); 
//typedef GpStatus (WINGDIPAPI * GdipGetImageEncoders_ptr)(UINT numEncoders ,UINT size, ImageCodecInfo *encoders); 
//typedef GpStatus (WINGDIPAPI * GdipComment_ptr)(GpGraphics *graphics, UINT sizeData, GDIPCONST BYTE *data);

DECLARE_FUNCPTR(GdipFlush);
DECLARE_FUNCPTR(GdipCreateFromHDC);
//DECLARE_FUNCPTR(GdipCreateFromHDC2);
DECLARE_FUNCPTR(GdipCreateFromHWND);
//DECLARE_FUNCPTR(GdipCreateFromHWNDICM);
DECLARE_FUNCPTR(GdipDeleteGraphics);
//DECLARE_FUNCPTR(GdipGetDC);
//DECLARE_FUNCPTR(GdipReleaseDC);
//DECLARE_FUNCPTR(GdipSetCompositingMode);
//DECLARE_FUNCPTR(GdipGetCompositingMode);
//DECLARE_FUNCPTR(GdipSetRenderingOrigin);
//DECLARE_FUNCPTR(GdipGetRenderingOrigin);
//DECLARE_FUNCPTR(GdipSetCompositingQuality);
//DECLARE_FUNCPTR(GdipGetCompositingQuality);
//DECLARE_FUNCPTR(GdipSetSmoothingMode);
//DECLARE_FUNCPTR(GdipGetSmoothingMode);
//DECLARE_FUNCPTR(GdipSetPixelOffsetMode);
//DECLARE_FUNCPTR(GdipGetPixelOffsetMode);
//DECLARE_FUNCPTR(GdipSetTextRenderingHint);
//DECLARE_FUNCPTR(GdipGetTextRenderingHint);
//DECLARE_FUNCPTR(GdipSetTextContrast);
//DECLARE_FUNCPTR(GdipGetTextContrast);
//DECLARE_FUNCPTR(GdipSetInterpolationMode);
//DECLARE_FUNCPTR(GdipGetInterpolationMode);
//DECLARE_FUNCPTR(GdipSetWorldTransform);
//DECLARE_FUNCPTR(GdipResetWorldTransform);
//DECLARE_FUNCPTR(GdipMultiplyWorldTransform);
DECLARE_FUNCPTR(GdipTranslateWorldTransform);
//DECLARE_FUNCPTR(GdipScaleWorldTransform);
DECLARE_FUNCPTR(GdipRotateWorldTransform);
//DECLARE_FUNCPTR(GdipGetWorldTransform);
//DECLARE_FUNCPTR(GdipResetPageTransform);
//DECLARE_FUNCPTR(GdipGetPageUnit);
//DECLARE_FUNCPTR(GdipGetPageScale);
//DECLARE_FUNCPTR(GdipSetPageUnit);
//DECLARE_FUNCPTR(GdipSetPageScale);
//DECLARE_FUNCPTR(GdipGetDpiX);
//DECLARE_FUNCPTR(GdipGetDpiY);
//DECLARE_FUNCPTR(GdipTransformPoints);
//DECLARE_FUNCPTR(GdipTransformPointsI);
//DECLARE_FUNCPTR(GdipGetNearestColor);
//DECLARE_FUNCPTR(GdipCreateHalftonePalette);
//DECLARE_FUNCPTR(GdipDrawLine);
//DECLARE_FUNCPTR(GdipDrawLineI);
//DECLARE_FUNCPTR(GdipDrawLines);
//DECLARE_FUNCPTR(GdipDrawLinesI);
//DECLARE_FUNCPTR(GdipDrawArc);
//DECLARE_FUNCPTR(GdipDrawArcI);
//DECLARE_FUNCPTR(GdipDrawBezier);
//DECLARE_FUNCPTR(GdipDrawBezierI);
//DECLARE_FUNCPTR(GdipDrawBeziers);
//DECLARE_FUNCPTR(GdipDrawBeziersI);
//DECLARE_FUNCPTR(GdipDrawRectangle);
//DECLARE_FUNCPTR(GdipDrawRectangleI);
//DECLARE_FUNCPTR(GdipDrawRectangles);
//DECLARE_FUNCPTR(GdipDrawRectanglesI);
DECLARE_FUNCPTR(GdipDrawEllipse);
//DECLARE_FUNCPTR(GdipDrawEllipseI);
//DECLARE_FUNCPTR(GdipDrawPie);
//DECLARE_FUNCPTR(GdipDrawPieI);
//DECLARE_FUNCPTR(GdipDrawPolygon);
//DECLARE_FUNCPTR(GdipDrawPolygonI);
//DECLARE_FUNCPTR(GdipDrawPath);
//DECLARE_FUNCPTR(GdipDrawCurve);
//DECLARE_FUNCPTR(GdipDrawCurveI);
//DECLARE_FUNCPTR(GdipDrawCurve2);
//DECLARE_FUNCPTR(GdipDrawCurve2I);
//DECLARE_FUNCPTR(GdipDrawCurve3);
//DECLARE_FUNCPTR(GdipDrawCurve3I);
//DECLARE_FUNCPTR(GdipDrawClosedCurve);
//DECLARE_FUNCPTR(GdipDrawClosedCurveI);
//DECLARE_FUNCPTR(GdipDrawClosedCurve2);
//DECLARE_FUNCPTR(GdipDrawClosedCurve2I);
//DECLARE_FUNCPTR(GdipGraphicsClear);
//DECLARE_FUNCPTR(GdipFillRectangle);
//DECLARE_FUNCPTR(GdipFillRectangleI);
//DECLARE_FUNCPTR(GdipFillRectangles);
//DECLARE_FUNCPTR(GdipFillRectanglesI);
//DECLARE_FUNCPTR(GdipFillPolygon);
//DECLARE_FUNCPTR(GdipFillPolygonI);
//DECLARE_FUNCPTR(GdipFillPolygon2);
//DECLARE_FUNCPTR(GdipFillPolygon2I);
//DECLARE_FUNCPTR(GdipFillEllipse);
//DECLARE_FUNCPTR(GdipFillEllipseI);
//DECLARE_FUNCPTR(GdipFillPie);
//DECLARE_FUNCPTR(GdipFillPieI);
//DECLARE_FUNCPTR(GdipFillPath);
//DECLARE_FUNCPTR(GdipFillClosedCurve);
//DECLARE_FUNCPTR(GdipFillClosedCurveI);
//DECLARE_FUNCPTR(GdipFillClosedCurve2);
//DECLARE_FUNCPTR(GdipFillClosedCurve2I);
//DECLARE_FUNCPTR(GdipFillRegion);
DECLARE_FUNCPTR(GdipDrawImage);
//DECLARE_FUNCPTR(GdipDrawImageI);
//DECLARE_FUNCPTR(GdipDrawImageRect);
//DECLARE_FUNCPTR(GdipDrawImageRectI);
//DECLARE_FUNCPTR(GdipDrawImagePoints);
//DECLARE_FUNCPTR(GdipDrawImagePointsI);
//DECLARE_FUNCPTR(GdipDrawImagePointRect);
//DECLARE_FUNCPTR(GdipDrawImagePointRectI);
DECLARE_FUNCPTR(GdipDrawImageRectRect);
//DECLARE_FUNCPTR(GdipDrawImageRectRectI);
//DECLARE_FUNCPTR(GdipDrawImagePointsRect);
//DECLARE_FUNCPTR(GdipDrawImagePointsRectI);
//DECLARE_FUNCPTR(GdipEnumerateMetafileDestPoint);
//DECLARE_FUNCPTR(GdipEnumerateMetafileDestPointI);
//DECLARE_FUNCPTR(GdipEnumerateMetafileDestRect);
//DECLARE_FUNCPTR(GdipEnumerateMetafileDestRectI);
//DECLARE_FUNCPTR(GdipEnumerateMetafileDestPoints);
//DECLARE_FUNCPTR(GdipEnumerateMetafileDestPointsI);
//DECLARE_FUNCPTR(GdipEnumerateMetafileSrcRectDestPoint);
//DECLARE_FUNCPTR(GdipEnumerateMetafileSrcRectDestPointI);
//DECLARE_FUNCPTR(GdipEnumerateMetafileSrcRectDestRect);
//DECLARE_FUNCPTR(GdipEnumerateMetafileSrcRectDestRectI);
//DECLARE_FUNCPTR(GdipEnumerateMetafileSrcRectDestPoints);
//DECLARE_FUNCPTR(GdipEnumerateMetafileSrcRectDestPointsI);
//DECLARE_FUNCPTR(GdipPlayMetafileRecord);
//DECLARE_FUNCPTR(GdipSetClipGraphics);
//DECLARE_FUNCPTR(GdipSetClipRect);
//DECLARE_FUNCPTR(GdipSetClipRectI);
//DECLARE_FUNCPTR(GdipSetClipPath);
//DECLARE_FUNCPTR(GdipSetClipRegion);
//DECLARE_FUNCPTR(GdipSetClipHrgn);
//DECLARE_FUNCPTR(GdipResetClip);
//DECLARE_FUNCPTR(GdipTranslateClip);
//DECLARE_FUNCPTR(GdipTranslateClipI);
//DECLARE_FUNCPTR(GdipGetClip);
//DECLARE_FUNCPTR(GdipGetClipBounds);
//DECLARE_FUNCPTR(GdipGetClipBoundsI);
//DECLARE_FUNCPTR(GdipIsClipEmpty);
//DECLARE_FUNCPTR(GdipGetVisibleClipBounds);
//DECLARE_FUNCPTR(GdipGetVisibleClipBoundsI);
//DECLARE_FUNCPTR(GdipIsVisibleClipEmpty);
//DECLARE_FUNCPTR(GdipIsVisiblePoint);
//DECLARE_FUNCPTR(GdipIsVisiblePointI);
//DECLARE_FUNCPTR(GdipIsVisibleRect);
//DECLARE_FUNCPTR(GdipIsVisibleRectI);
//DECLARE_FUNCPTR(GdipSaveGraphics);
//DECLARE_FUNCPTR(GdipRestoreGraphics);
//DECLARE_FUNCPTR(GdipBeginContainer);
//DECLARE_FUNCPTR(GdipBeginContainerI);
//DECLARE_FUNCPTR(GdipBeginContainer2);
//DECLARE_FUNCPTR(GdipEndContainer);
//DECLARE_FUNCPTR(GdipGetMetafileHeaderFromWmf);
//DECLARE_FUNCPTR(GdipGetMetafileHeaderFromEmf);
//DECLARE_FUNCPTR(GdipGetMetafileHeaderFromFile);
//DECLARE_FUNCPTR(GdipGetMetafileHeaderFromStream);
//DECLARE_FUNCPTR(GdipGetMetafileHeaderFromMetafile);
//DECLARE_FUNCPTR(GdipGetHemfFromMetafile);
//DECLARE_FUNCPTR(GdipCreateStreamOnFile);
//DECLARE_FUNCPTR(GdipCreateMetafileFromWmf);
//DECLARE_FUNCPTR(GdipCreateMetafileFromEmf);
//DECLARE_FUNCPTR(GdipCreateMetafileFromFile);
//DECLARE_FUNCPTR(GdipCreateMetafileFromWmfFile);
//DECLARE_FUNCPTR(GdipCreateMetafileFromStream);
//DECLARE_FUNCPTR(GdipRecordMetafile);
//DECLARE_FUNCPTR(GdipRecordMetafileI);
//DECLARE_FUNCPTR(GdipRecordMetafileFileName);
//DECLARE_FUNCPTR(GdipRecordMetafileFileNameI);
//DECLARE_FUNCPTR(GdipRecordMetafileStream);
//DECLARE_FUNCPTR(GdipRecordMetafileStreamI);
//DECLARE_FUNCPTR(GdipSetMetafileDownLevelRasterizationLimit);
//DECLARE_FUNCPTR(GdipGetMetafileDownLevelRasterizationLimit);
//DECLARE_FUNCPTR(GdipGetImageDecodersSize);
//DECLARE_FUNCPTR(GdipGetImageDecoders);
//DECLARE_FUNCPTR(GdipGetImageEncodersSize);
//DECLARE_FUNCPTR(GdipGetImageEncoders);
//DECLARE_FUNCPTR(GdipComment);
