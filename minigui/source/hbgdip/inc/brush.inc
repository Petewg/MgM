
typedef GpStatus (WINGDIPAPI * GdipCloneBrush_ptr)(GpBrush *brush, GpBrush **cloneBrush);
typedef GpStatus (WINGDIPAPI * GdipDeleteBrush_ptr)(GpBrush *brush);
typedef GpStatus (WINGDIPAPI * GdipGetBrushType_ptr)(GpBrush *brush, GpBrushType *type);
//typedef GpStatus (WINGDIPAPI * GdipCreateHatchBrush_ptr)(GpHatchStyle hatchstyle, ARGB forecol, ARGB backcol, GpHatch **brush);
//typedef GpStatus (WINGDIPAPI * GdipGetHatchStyle_ptr)(GpHatch *brush, GpHatchStyle *hatchstyle);
//typedef GpStatus (WINGDIPAPI * GdipGetHatchForegroundColor_ptr)(GpHatch *brush, ARGB* forecol);
//typedef GpStatus (WINGDIPAPI * GdipGetHatchBackgroundColor_ptr)(GpHatch *brush, ARGB* backcol);
//typedef GpStatus (WINGDIPAPI * GdipCreateTexture_ptr)(GpImage *image, GpWrapMode wrapmode, GpTexture **texture);
//typedef GpStatus (WINGDIPAPI * GdipCreateTexture2_ptr)(GpImage *image, GpWrapMode wrapmode, REAL x, REAL y, REAL width, REAL height, GpTexture **texture);
//typedef GpStatus (WINGDIPAPI * GdipCreateTextureIA_ptr)(GpImage *image, GDIPCONST GpImageAttributes *imageAttributes, REAL x, REAL y, REAL width, REAL height, GpTexture **texture);
//typedef GpStatus (WINGDIPAPI * GdipCreateTexture2I_ptr)(GpImage *image, GpWrapMode wrapmode, INT x, INT y, INT width, INT height, GpTexture **texture);
//typedef GpStatus (WINGDIPAPI * GdipCreateTextureIAI_ptr)(GpImage *image, GDIPCONST GpImageAttributes *imageAttributes, INT x, INT y, INT width, INT height, GpTexture **texture);
//typedef GpStatus (WINGDIPAPI * GdipGetTextureTransform_ptr)(GpTexture *brush, GpMatrix *matrix);
//typedef GpStatus (WINGDIPAPI * GdipSetTextureTransform_ptr)(GpTexture *brush, GDIPCONST GpMatrix *matrix);
//typedef GpStatus (WINGDIPAPI * GdipResetTextureTransform_ptr)(GpTexture* brush);
//typedef GpStatus (WINGDIPAPI * GdipMultiplyTextureTransform_ptr)(GpTexture* brush, GDIPCONST GpMatrix *matrix, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipTranslateTextureTransform_ptr)(GpTexture* brush, REAL dx, REAL dy, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipScaleTextureTransform_ptr)(GpTexture* brush, REAL sx, REAL sy, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipRotateTextureTransform_ptr)(GpTexture* brush, REAL angle, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipSetTextureWrapMode_ptr)(GpTexture *brush, GpWrapMode wrapmode);
//typedef GpStatus (WINGDIPAPI * GdipGetTextureWrapMode_ptr)(GpTexture *brush, GpWrapMode *wrapmode);
//typedef GpStatus (WINGDIPAPI * GdipGetTextureImage_ptr)(GpTexture *brush, GpImage **image);
typedef GpStatus (WINGDIPAPI * GdipCreateSolidFill_ptr)(ARGB color, GpSolidFill **brush);
typedef GpStatus (WINGDIPAPI * GdipSetSolidFillColor_ptr)(GpSolidFill *brush, ARGB color);
typedef GpStatus (WINGDIPAPI * GdipGetSolidFillColor_ptr)(GpSolidFill *brush, ARGB *color);
//typedef GpStatus (WINGDIPAPI * GdipCreateLineBrush_ptr)(GDIPCONST GpPointF* point1, GDIPCONST GpPointF* point2, ARGB color1, ARGB color2, GpWrapMode wrapMode, GpLineGradient **lineGradient);
//typedef GpStatus (WINGDIPAPI * GdipCreateLineBrushI_ptr)(GDIPCONST GpPoint* point1, GDIPCONST GpPoint* point2, ARGB color1, ARGB color2, GpWrapMode wrapMode, GpLineGradient **lineGradient);
//typedef GpStatus (WINGDIPAPI * GdipCreateLineBrushFromRect_ptr)(GDIPCONST GpRectF* rect, ARGB color1, ARGB color2, LinearGradientMode mode, GpWrapMode wrapMode, GpLineGradient **lineGradient);
//typedef GpStatus (WINGDIPAPI * GdipCreateLineBrushFromRectI_ptr)(GDIPCONST GpRect* rect, ARGB color1, ARGB color2, LinearGradientMode mode, GpWrapMode wrapMode, GpLineGradient **lineGradient);
//typedef GpStatus (WINGDIPAPI * GdipCreateLineBrushFromRectWithAngle_ptr)(GDIPCONST GpRectF* rect, ARGB color1, ARGB color2, REAL angle, BOOL isAngleScalable, GpWrapMode wrapMode, GpLineGradient **lineGradient);
//typedef GpStatus (WINGDIPAPI * GdipCreateLineBrushFromRectWithAngleI_ptr)(GDIPCONST GpRect* rect, ARGB color1, ARGB color2, REAL angle, BOOL isAngleScalable, GpWrapMode wrapMode, GpLineGradient **lineGradient);
//typedef GpStatus (WINGDIPAPI * GdipSetLineColors_ptr)(GpLineGradient *brush, ARGB color1, ARGB color2);
//typedef GpStatus (WINGDIPAPI * GdipGetLineColors_ptr)(GpLineGradient *brush, ARGB* colors);
//typedef GpStatus (WINGDIPAPI * GdipGetLineRect_ptr)(GpLineGradient *brush, GpRectF *rect);
//typedef GpStatus (WINGDIPAPI * GdipGetLineRectI_ptr)(GpLineGradient *brush, GpRect *rect);
//typedef GpStatus (WINGDIPAPI * GdipSetLineGammaCorrection_ptr)(GpLineGradient *brush, BOOL useGammaCorrection);
//typedef GpStatus (WINGDIPAPI * GdipGetLineGammaCorrection_ptr)(GpLineGradient *brush, BOOL *useGammaCorrection);
//typedef GpStatus (WINGDIPAPI * GdipGetLineBlendCount_ptr)(GpLineGradient *brush, INT *count);
//typedef GpStatus (WINGDIPAPI * GdipGetLineBlend_ptr)(GpLineGradient *brush, REAL *blend, REAL* positions, INT count);
//typedef GpStatus (WINGDIPAPI * GdipSetLineBlend_ptr)(GpLineGradient *brush, GDIPCONST REAL *blend, GDIPCONST REAL* positions, INT count);
//typedef GpStatus (WINGDIPAPI * GdipGetLinePresetBlendCount_ptr)(GpLineGradient *brush, INT *count);
//typedef GpStatus (WINGDIPAPI * GdipGetLinePresetBlend_ptr)(GpLineGradient *brush, ARGB *blend, REAL* positions, INT count);
//typedef GpStatus (WINGDIPAPI * GdipSetLinePresetBlend_ptr)(GpLineGradient *brush, GDIPCONST ARGB *blend, GDIPCONST REAL* positions, INT count);
//typedef GpStatus (WINGDIPAPI * GdipSetLineSigmaBlend_ptr)(GpLineGradient *brush, REAL focus, REAL scale);
//typedef GpStatus (WINGDIPAPI * GdipSetLineLinearBlend_ptr)(GpLineGradient *brush, REAL focus, REAL scale);
//typedef GpStatus (WINGDIPAPI * GdipSetLineWrapMode_ptr)(GpLineGradient *brush, GpWrapMode wrapmode);
//typedef GpStatus (WINGDIPAPI * GdipGetLineWrapMode_ptr)(GpLineGradient *brush, GpWrapMode *wrapmode);
//typedef GpStatus (WINGDIPAPI * GdipGetLineTransform_ptr)(GpLineGradient *brush, GpMatrix *matrix);
//typedef GpStatus (WINGDIPAPI * GdipSetLineTransform_ptr)(GpLineGradient *brush, GDIPCONST GpMatrix *matrix);
//typedef GpStatus (WINGDIPAPI * GdipResetLineTransform_ptr)(GpLineGradient* brush);
//typedef GpStatus (WINGDIPAPI * GdipMultiplyLineTransform_ptr)(GpLineGradient* brush, GDIPCONST GpMatrix *matrix, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipTranslateLineTransform_ptr)(GpLineGradient* brush, REAL dx, REAL dy, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipScaleLineTransform_ptr)(GpLineGradient* brush, REAL sx, REAL sy, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipRotateLineTransform_ptr)(GpLineGradient* brush, REAL angle, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipCreatePathGradient_ptr)(GDIPCONST GpPointF* points, INT count, GpWrapMode wrapMode, GpPathGradient **polyGradient);
//typedef GpStatus (WINGDIPAPI * GdipCreatePathGradientI_ptr)(GDIPCONST GpPoint* points, INT count, GpWrapMode wrapMode, GpPathGradient **polyGradient);
//typedef GpStatus (WINGDIPAPI * GdipCreatePathGradientFromPath_ptr)(GDIPCONST GpPath* path, GpPathGradient **polyGradient);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientCenterColor_ptr)(GpPathGradient *brush, ARGB* colors);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientCenterColor_ptr)(GpPathGradient *brush, ARGB colors);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientSurroundColorsWithCount_ptr)(GpPathGradient *brush, ARGB* color, INT* count);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientSurroundColorsWithCount_ptr)(GpPathGradient *brush, GDIPCONST ARGB* color, INT* count);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientPath_ptr)(GpPathGradient *brush, GpPath *path);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientPath_ptr)(GpPathGradient *brush, GDIPCONST GpPath *path);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientCenterPoint_ptr)(GpPathGradient *brush, GpPointF* points);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientCenterPointI_ptr)(GpPathGradient *brush, GpPoint* points);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientCenterPoint_ptr)(GpPathGradient *brush, GDIPCONST GpPointF* points);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientCenterPointI_ptr)(GpPathGradient *brush, GDIPCONST GpPoint* points);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientRect_ptr)(GpPathGradient *brush, GpRectF *rect);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientRectI_ptr)(GpPathGradient *brush, GpRect *rect);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientPointCount_ptr)(GpPathGradient *brush, INT* count);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientSurroundColorCount_ptr)(GpPathGradient *brush, INT* count);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientGammaCorrection_ptr)(GpPathGradient *brush, BOOL useGammaCorrection);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientGammaCorrection_ptr)(GpPathGradient *brush, BOOL *useGammaCorrection);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientBlendCount_ptr)(GpPathGradient *brush, INT *count);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientBlend_ptr)(GpPathGradient *brush, REAL *blend, REAL *positions, INT count);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientBlend_ptr)(GpPathGradient *brush, GDIPCONST REAL *blend, GDIPCONST REAL *positions, INT count);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientPresetBlendCount_ptr)(GpPathGradient *brush, INT *count);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientPresetBlend_ptr)(GpPathGradient *brush, ARGB *blend, REAL* positions, INT count);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientPresetBlend_ptr)(GpPathGradient *brush, GDIPCONST ARGB *blend, GDIPCONST REAL* positions, INT count);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientSigmaBlend_ptr)(GpPathGradient *brush, REAL focus, REAL scale);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientLinearBlend_ptr)(GpPathGradient *brush, REAL focus, REAL scale);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientWrapMode_ptr)(GpPathGradient *brush, GpWrapMode *wrapmode);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientWrapMode_ptr)(GpPathGradient *brush, GpWrapMode wrapmode);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientTransform_ptr)(GpPathGradient *brush, GpMatrix *matrix);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientTransform_ptr)(GpPathGradient *brush, GpMatrix *matrix);
//typedef GpStatus (WINGDIPAPI * GdipResetPathGradientTransform_ptr)(GpPathGradient* brush);
//typedef GpStatus (WINGDIPAPI * GdipMultiplyPathGradientTransform_ptr)(GpPathGradient* brush, GDIPCONST GpMatrix *matrix, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipTranslatePathGradientTransform_ptr)(GpPathGradient* brush, REAL dx, REAL dy, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipScalePathGradientTransform_ptr)(GpPathGradient* brush, REAL sx, REAL sy, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipRotatePathGradientTransform_ptr)(GpPathGradient* brush, REAL angle, GpMatrixOrder order);
//typedef GpStatus (WINGDIPAPI * GdipGetPathGradientFocusScales_ptr)(GpPathGradient *brush, REAL* xScale, REAL* yScale);
//typedef GpStatus (WINGDIPAPI * GdipSetPathGradientFocusScales_ptr)(GpPathGradient *brush, REAL xScale, REAL yScale);

DECLARE_FUNCPTR(GdipCloneBrush);
DECLARE_FUNCPTR(GdipDeleteBrush);
DECLARE_FUNCPTR(GdipGetBrushType);
//DECLARE_FUNCPTR(GdipCreateHatchBrush);
//DECLARE_FUNCPTR(GdipGetHatchStyle);
//DECLARE_FUNCPTR(GdipGetHatchForegroundColor);
//DECLARE_FUNCPTR(GdipGetHatchBackgroundColor);
//DECLARE_FUNCPTR(GdipCreateTexture);
//DECLARE_FUNCPTR(GdipCreateTexture2);
//DECLARE_FUNCPTR(GdipCreateTextureIA);
//DECLARE_FUNCPTR(GdipCreateTexture2I);
//DECLARE_FUNCPTR(GdipCreateTextureIAI);
//DECLARE_FUNCPTR(GdipGetTextureTransform);
//DECLARE_FUNCPTR(GdipSetTextureTransform);
//DECLARE_FUNCPTR(GdipResetTextureTransform);
//DECLARE_FUNCPTR(GdipMultiplyTextureTransform);
//DECLARE_FUNCPTR(GdipTranslateTextureTransform);
//DECLARE_FUNCPTR(GdipScaleTextureTransform);
//DECLARE_FUNCPTR(GdipRotateTextureTransform);
//DECLARE_FUNCPTR(GdipSetTextureWrapMode);
//DECLARE_FUNCPTR(GdipGetTextureWrapMode);
//DECLARE_FUNCPTR(GdipGetTextureImage);
DECLARE_FUNCPTR(GdipCreateSolidFill);
DECLARE_FUNCPTR(GdipSetSolidFillColor);
DECLARE_FUNCPTR(GdipGetSolidFillColor);
//DECLARE_FUNCPTR(GdipCreateLineBrush);
//DECLARE_FUNCPTR(GdipCreateLineBrushI);
//DECLARE_FUNCPTR(GdipCreateLineBrushFromRect);
//DECLARE_FUNCPTR(GdipCreateLineBrushFromRectI);
//DECLARE_FUNCPTR(GdipCreateLineBrushFromRectWithAngle);
//DECLARE_FUNCPTR(GdipCreateLineBrushFromRectWithAngleI);
//DECLARE_FUNCPTR(GdipSetLineColors);
//DECLARE_FUNCPTR(GdipGetLineColors);
//DECLARE_FUNCPTR(GdipGetLineRect);
//DECLARE_FUNCPTR(GdipGetLineRectI);
//DECLARE_FUNCPTR(GdipSetLineGammaCorrection);
//DECLARE_FUNCPTR(GdipGetLineGammaCorrection);
//DECLARE_FUNCPTR(GdipGetLineBlendCount);
//DECLARE_FUNCPTR(GdipGetLineBlend);
//DECLARE_FUNCPTR(GdipSetLineBlend);
//DECLARE_FUNCPTR(GdipGetLinePresetBlendCount);
//DECLARE_FUNCPTR(GdipGetLinePresetBlend);
//DECLARE_FUNCPTR(GdipSetLinePresetBlend);
//DECLARE_FUNCPTR(GdipSetLineSigmaBlend);
//DECLARE_FUNCPTR(GdipSetLineLinearBlend);
//DECLARE_FUNCPTR(GdipSetLineWrapMode);
//DECLARE_FUNCPTR(GdipGetLineWrapMode);
//DECLARE_FUNCPTR(GdipGetLineTransform);
//DECLARE_FUNCPTR(GdipSetLineTransform);
//DECLARE_FUNCPTR(GdipResetLineTransform);
//DECLARE_FUNCPTR(GdipMultiplyLineTransform);
//DECLARE_FUNCPTR(GdipTranslateLineTransform);
//DECLARE_FUNCPTR(GdipScaleLineTransform);
//DECLARE_FUNCPTR(GdipRotateLineTransform);
//DECLARE_FUNCPTR(GdipCreatePathGradient);
//DECLARE_FUNCPTR(GdipCreatePathGradientI);
//DECLARE_FUNCPTR(GdipCreatePathGradientFromPath);
//DECLARE_FUNCPTR(GdipGetPathGradientCenterColor);
//DECLARE_FUNCPTR(GdipSetPathGradientCenterColor);
//DECLARE_FUNCPTR(GdipGetPathGradientSurroundColorsWithCount);
//DECLARE_FUNCPTR(GdipSetPathGradientSurroundColorsWithCount);
//DECLARE_FUNCPTR(GdipGetPathGradientPath);
//DECLARE_FUNCPTR(GdipSetPathGradientPath);
//DECLARE_FUNCPTR(GdipGetPathGradientCenterPoint);
//DECLARE_FUNCPTR(GdipGetPathGradientCenterPointI);
//DECLARE_FUNCPTR(GdipSetPathGradientCenterPoint);
//DECLARE_FUNCPTR(GdipSetPathGradientCenterPointI);
//DECLARE_FUNCPTR(GdipGetPathGradientRect);
//DECLARE_FUNCPTR(GdipGetPathGradientRectI);
//DECLARE_FUNCPTR(GdipGetPathGradientPointCount);
//DECLARE_FUNCPTR(GdipGetPathGradientSurroundColorCount);
//DECLARE_FUNCPTR(GdipSetPathGradientGammaCorrection);
//DECLARE_FUNCPTR(GdipGetPathGradientGammaCorrection);
//DECLARE_FUNCPTR(GdipGetPathGradientBlendCount);
//DECLARE_FUNCPTR(GdipGetPathGradientBlend);
//DECLARE_FUNCPTR(GdipSetPathGradientBlend);
//DECLARE_FUNCPTR(GdipGetPathGradientPresetBlendCount);
//DECLARE_FUNCPTR(GdipGetPathGradientPresetBlend);
//DECLARE_FUNCPTR(GdipSetPathGradientPresetBlend);
//DECLARE_FUNCPTR(GdipSetPathGradientSigmaBlend);
//DECLARE_FUNCPTR(GdipSetPathGradientLinearBlend);
//DECLARE_FUNCPTR(GdipGetPathGradientWrapMode);
//DECLARE_FUNCPTR(GdipSetPathGradientWrapMode);
//DECLARE_FUNCPTR(GdipGetPathGradientTransform);
//DECLARE_FUNCPTR(GdipSetPathGradientTransform);
//DECLARE_FUNCPTR(GdipResetPathGradientTransform);
//DECLARE_FUNCPTR(GdipMultiplyPathGradientTransform);
//DECLARE_FUNCPTR(GdipTranslatePathGradientTransform);
//DECLARE_FUNCPTR(GdipScalePathGradientTransform);
//DECLARE_FUNCPTR(GdipRotatePathGradientTransform);
//DECLARE_FUNCPTR(GdipGetPathGradientFocusScales);
//DECLARE_FUNCPTR(GdipSetPathGradientFocusScales);
